{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "JWBPpiJxN3tG"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets mount the drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9FOI-tMgP3fO",
        "outputId": "18d040b2-516b-48ad-c942-0a7f170987d5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/module6 datasets /Online Retail.csv')\n",
        "\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lo27r_XyP6ue",
        "outputId": "d9345301-c741-4ff1-d301-fc11da119e28"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0         536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1         536365     71053                  WHITE METAL LANTERN         6   \n",
              "2         536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3         536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4         536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "...          ...       ...                                  ...       ...   \n",
              "541904    581587     22613          PACK OF 20 SPACEBOY NAPKINS        12   \n",
              "541905    581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n",
              "541906    581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n",
              "541907    581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
              "541908    581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0        12/1/10 8:26       2.55     17850.0  United Kingdom  \n",
              "1        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "2        12/1/10 8:26       2.75     17850.0  United Kingdom  \n",
              "3        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "4        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "...               ...        ...         ...             ...  \n",
              "541904  12/9/11 12:50       0.85     12680.0          France  \n",
              "541905  12/9/11 12:50       2.10     12680.0          France  \n",
              "541906  12/9/11 12:50       4.15     12680.0          France  \n",
              "541907  12/9/11 12:50       4.15     12680.0          France  \n",
              "541908  12/9/11 12:50       4.95     12680.0          France  \n",
              "\n",
              "[541909 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cad2a35d-7972-41cf-916f-04a992a7f4d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n",
              "      <td>12</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>0.85</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>6</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>2.10</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
              "      <td>4</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
              "      <td>4</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.95</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>541909 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cad2a35d-7972-41cf-916f-04a992a7f4d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cad2a35d-7972-41cf-916f-04a992a7f4d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cad2a35d-7972-41cf-916f-04a992a7f4d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-692da9fd-9efe-434c-b615-01feba5d48de\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-692da9fd-9efe-434c-b615-01feba5d48de')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-692da9fd-9efe-434c-b615-01feba5d48de button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_455ce559-4f94-48c9-a9a2-f173af973af1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_455ce559-4f94-48c9-a9a2-f173af973af1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "import datetime as dt\n",
        "\n"
      ],
      "metadata": {
        "id": "VidwaKF8QLOr"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize'] = (15,8)\n",
        "sns.set(rc = {'figure.figsize':(15,8)})"
      ],
      "metadata": {
        "id": "GjUfSncXQgFb"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ao7c553Quea",
        "outputId": "dc40f5c4-f584-424d-fb04-ef895e0c639f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(541909, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "enJ-HKRCRWGc",
        "outputId": "7d61576b-b998-4544-d890-6954c8ddeb7e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate',\n",
              "       'UnitPrice', 'CustomerID', 'Country'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets check the data type of all the columns\n",
        "df.dtypes\n",
        "# here we have two abnormilities\n",
        "# 1 is the date column is not in the propper formate\n",
        "# 2 is the customer id can not be in float\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "u7p8ISzcRaX3",
        "outputId": "73aeb21f-48f5-4d17-f138-bd0eb87dfa6a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo       object\n",
              "StockCode       object\n",
              "Description     object\n",
              "Quantity         int64\n",
              "InvoiceDate     object\n",
              "UnitPrice      float64\n",
              "CustomerID     float64\n",
              "Country         object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n",
        "#we can see there s some of nul values also\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUeLzj3fRunZ",
        "outputId": "dd71d2cb-0bd1-4a58-849a-fd03c6a75b8e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 541909 entries, 0 to 541908\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count   Dtype  \n",
            "---  ------       --------------   -----  \n",
            " 0   InvoiceNo    541909 non-null  object \n",
            " 1   StockCode    541909 non-null  object \n",
            " 2   Description  540455 non-null  object \n",
            " 3   Quantity     541909 non-null  int64  \n",
            " 4   InvoiceDate  541909 non-null  object \n",
            " 5   UnitPrice    541909 non-null  float64\n",
            " 6   CustomerID   406829 non-null  float64\n",
            " 7   Country      541909 non-null  object \n",
            "dtypes: float64(2), int64(1), object(5)\n",
            "memory usage: 33.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()\n",
        "# here we can see there s minimum quatity is in negative number that is not true\n",
        "# also we can see the diffrence between 75% and max percentile there is so much diffrence so there must be some of outliers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "sdkKlaSqyT2Y",
        "outputId": "11a35f60-48c8-471d-e0cb-06a0742e4234"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Quantity      UnitPrice     CustomerID\n",
              "count  541909.000000  541909.000000  406829.000000\n",
              "mean        9.552250       4.611114   15287.690570\n",
              "std       218.081158      96.759853    1713.600303\n",
              "min    -80995.000000  -11062.060000   12346.000000\n",
              "25%         1.000000       1.250000   13953.000000\n",
              "50%         3.000000       2.080000   15152.000000\n",
              "75%        10.000000       4.130000   16791.000000\n",
              "max     80995.000000   38970.000000   18287.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4abd614a-8a80-4fc1-b77c-de05a49c0f9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>541909.000000</td>\n",
              "      <td>541909.000000</td>\n",
              "      <td>406829.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>9.552250</td>\n",
              "      <td>4.611114</td>\n",
              "      <td>15287.690570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>218.081158</td>\n",
              "      <td>96.759853</td>\n",
              "      <td>1713.600303</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-80995.000000</td>\n",
              "      <td>-11062.060000</td>\n",
              "      <td>12346.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>13953.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.080000</td>\n",
              "      <td>15152.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>4.130000</td>\n",
              "      <td>16791.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>80995.000000</td>\n",
              "      <td>38970.000000</td>\n",
              "      <td>18287.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4abd614a-8a80-4fc1-b77c-de05a49c0f9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4abd614a-8a80-4fc1-b77c-de05a49c0f9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4abd614a-8a80-4fc1-b77c-de05a49c0f9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-46b86076-6b82-4f53-bc0d-e027f5d058cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46b86076-6b82-4f53-bc0d-e027f5d058cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-46b86076-6b82-4f53-bc0d-e027f5d058cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# also we can see the diffrence between 75% and max percentile there is so much diffrence so there must be some of outliers\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 196412.42266088672,\n        \"min\": -80995.0,\n        \"max\": 541909.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.55224954743324,\n          3.0,\n          541909.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 190752.07570771928,\n        \"min\": -11062.06,\n        \"max\": 541909.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.611113626088513,\n          2.08,\n          541909.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139204.16800694188,\n        \"min\": 1713.6003033216632,\n        \"max\": 406829.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15287.690570239585,\n          15152.0,\n          406829.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# deal with duplicates\n",
        "duplicates = df[df.duplicated()]\n",
        "duplicates\n",
        "# lets drop them\n",
        "df.drop_duplicates(inplace = True)"
      ],
      "metadata": {
        "id": "GLFMpHfJyxKG"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# deeal with null values\n",
        "df.isnull().mean()*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "l9ugp6EjzTDO",
        "outputId": "e6c50148-3c4e-47b4-e17f-3e143bf08db5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo       0.000000\n",
              "StockCode       0.000000\n",
              "Description     0.270945\n",
              "Quantity        0.000000\n",
              "InvoiceDate     0.000000\n",
              "UnitPrice       0.000000\n",
              "CustomerID     25.163377\n",
              "Country         0.000000\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>0.270945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>25.163377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we have two columns their are containing null values\n",
        "# lets check seprately\n",
        "(df['CustomerID'].isnull().sum()/df.shape[0])*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rLo2Xo2x0R3P",
        "outputId": "34dd8fdc-c0c9-43a9-f30c-acc0175c096d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25.163377378918124"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['CustomerID'].isnull().mean()*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yVxsAC-w0zyw",
        "outputId": "7e7aa18b-61ca-4283-c327-45fdb4ebbd66"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25.163377378918124"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we can not impute the customer id because that is id and if we randomly use mode for impute this that will not be fare with our model\n",
        "# so we can simply remove them\n",
        "df.dropna(inplace = True)"
      ],
      "metadata": {
        "id": "rIS3Y1U31E0B"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "gif5hbI6NK3o",
        "outputId": "9b13e31a-fdd7-4677-d764-f4d72d28816c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo      0\n",
              "StockCode      0\n",
              "Description    0\n",
              "Quantity       0\n",
              "InvoiceDate    0\n",
              "UnitPrice      0\n",
              "CustomerID     0\n",
              "Country        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>StockCode</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Quantity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceDate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UnitPrice</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# now we have clear dataset without any null values\n",
        "# but we still have some of abormility in our data set lets handle them"
      ],
      "metadata": {
        "id": "0cGJT1IRNu7s"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# we have the quntity column which is contining the minimum values in negatives so lets handle this\n",
        "mask = df['Quantity'] < 0\n",
        "mask_df = df[mask]\n",
        "mask_df['StockCode'].value_counts()\n",
        "# there is no any pattern\n",
        "# lets check for the diffrent column\n",
        "mask_df['InvoiceNo'].value_counts()\n",
        "# we can see each c letter is containing the less then quatity here\n",
        "# c means cancelation\n",
        "# that means all the cancelation invoice no are varieng the wrong quatity"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "mtJGaJNqOKdZ",
        "outputId": "d4fcb57a-a9ca-4ea6-a5a9-a269e928276a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InvoiceNo\n",
              "C570867    101\n",
              "C560540     57\n",
              "C548460     45\n",
              "C560855     40\n",
              "C570828     39\n",
              "          ... \n",
              "C546740      1\n",
              "C546777      1\n",
              "C561682      1\n",
              "C561681      1\n",
              "C536379      1\n",
              "Name: count, Length: 3654, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>C570867</th>\n",
              "      <td>101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C560540</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C548460</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C560855</th>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C570828</th>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C546740</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C546777</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C561682</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C561681</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C536379</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3654 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['InvoiceNo'].dtype\n",
        "# we have to measure the the datatype of this columns must be in string\n",
        "# if it is not then we have to convert this in string and if it is allready object (string ) then we can directly use this"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9U0UsGKjOZVP",
        "outputId": "5114325b-5bd0-4c18-e4e6-83daccbacded"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('O')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# now we have to combine them all the data where each data regarding the cancelation invoice no\n",
        "# we can use startwith method for this\n",
        "mask = df['InvoiceNo'].str.startswith('C')\n",
        "df[mask]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "4bdBHhJxPvDY",
        "outputId": "f50be4ae-69f0-4147-ed1d-e0c0005dc456"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                       Description  Quantity  \\\n",
              "141      C536379         D                          Discount        -1   \n",
              "154      C536383    35004C   SET OF 3 COLOURED  FLYING DUCKS        -1   \n",
              "235      C536391     22556    PLASTERS IN TIN CIRCUS PARADE        -12   \n",
              "236      C536391     21984  PACK OF 12 PINK PAISLEY TISSUES        -24   \n",
              "237      C536391     21983  PACK OF 12 BLUE PAISLEY TISSUES        -24   \n",
              "...          ...       ...                               ...       ...   \n",
              "540449   C581490     23144   ZINC T-LIGHT HOLDER STARS SMALL       -11   \n",
              "541541   C581499         M                            Manual        -1   \n",
              "541715   C581568     21258        VICTORIAN SEWING BOX LARGE        -5   \n",
              "541716   C581569     84978  HANGING HEART JAR T-LIGHT HOLDER        -1   \n",
              "541717   C581569     20979     36 PENCILS TUBE RED RETROSPOT        -5   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "141      12/1/10 9:41      27.50     14527.0  United Kingdom  \n",
              "154      12/1/10 9:49       4.65     15311.0  United Kingdom  \n",
              "235     12/1/10 10:24       1.65     17548.0  United Kingdom  \n",
              "236     12/1/10 10:24       0.29     17548.0  United Kingdom  \n",
              "237     12/1/10 10:24       0.29     17548.0  United Kingdom  \n",
              "...               ...        ...         ...             ...  \n",
              "540449   12/9/11 9:57       0.83     14397.0  United Kingdom  \n",
              "541541  12/9/11 10:28     224.69     15498.0  United Kingdom  \n",
              "541715  12/9/11 11:57      10.95     15311.0  United Kingdom  \n",
              "541716  12/9/11 11:58       1.25     17315.0  United Kingdom  \n",
              "541717  12/9/11 11:58       1.25     17315.0  United Kingdom  \n",
              "\n",
              "[8872 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fdeac56f-2d75-40f8-af52-7ca31d6bad93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>C536379</td>\n",
              "      <td>D</td>\n",
              "      <td>Discount</td>\n",
              "      <td>-1</td>\n",
              "      <td>12/1/10 9:41</td>\n",
              "      <td>27.50</td>\n",
              "      <td>14527.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>C536383</td>\n",
              "      <td>35004C</td>\n",
              "      <td>SET OF 3 COLOURED  FLYING DUCKS</td>\n",
              "      <td>-1</td>\n",
              "      <td>12/1/10 9:49</td>\n",
              "      <td>4.65</td>\n",
              "      <td>15311.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>235</th>\n",
              "      <td>C536391</td>\n",
              "      <td>22556</td>\n",
              "      <td>PLASTERS IN TIN CIRCUS PARADE</td>\n",
              "      <td>-12</td>\n",
              "      <td>12/1/10 10:24</td>\n",
              "      <td>1.65</td>\n",
              "      <td>17548.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>236</th>\n",
              "      <td>C536391</td>\n",
              "      <td>21984</td>\n",
              "      <td>PACK OF 12 PINK PAISLEY TISSUES</td>\n",
              "      <td>-24</td>\n",
              "      <td>12/1/10 10:24</td>\n",
              "      <td>0.29</td>\n",
              "      <td>17548.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>237</th>\n",
              "      <td>C536391</td>\n",
              "      <td>21983</td>\n",
              "      <td>PACK OF 12 BLUE PAISLEY TISSUES</td>\n",
              "      <td>-24</td>\n",
              "      <td>12/1/10 10:24</td>\n",
              "      <td>0.29</td>\n",
              "      <td>17548.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540449</th>\n",
              "      <td>C581490</td>\n",
              "      <td>23144</td>\n",
              "      <td>ZINC T-LIGHT HOLDER STARS SMALL</td>\n",
              "      <td>-11</td>\n",
              "      <td>12/9/11 9:57</td>\n",
              "      <td>0.83</td>\n",
              "      <td>14397.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541541</th>\n",
              "      <td>C581499</td>\n",
              "      <td>M</td>\n",
              "      <td>Manual</td>\n",
              "      <td>-1</td>\n",
              "      <td>12/9/11 10:28</td>\n",
              "      <td>224.69</td>\n",
              "      <td>15498.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541715</th>\n",
              "      <td>C581568</td>\n",
              "      <td>21258</td>\n",
              "      <td>VICTORIAN SEWING BOX LARGE</td>\n",
              "      <td>-5</td>\n",
              "      <td>12/9/11 11:57</td>\n",
              "      <td>10.95</td>\n",
              "      <td>15311.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541716</th>\n",
              "      <td>C581569</td>\n",
              "      <td>84978</td>\n",
              "      <td>HANGING HEART JAR T-LIGHT HOLDER</td>\n",
              "      <td>-1</td>\n",
              "      <td>12/9/11 11:58</td>\n",
              "      <td>1.25</td>\n",
              "      <td>17315.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541717</th>\n",
              "      <td>C581569</td>\n",
              "      <td>20979</td>\n",
              "      <td>36 PENCILS TUBE RED RETROSPOT</td>\n",
              "      <td>-5</td>\n",
              "      <td>12/9/11 11:58</td>\n",
              "      <td>1.25</td>\n",
              "      <td>17315.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8872 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdeac56f-2d75-40f8-af52-7ca31d6bad93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fdeac56f-2d75-40f8-af52-7ca31d6bad93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fdeac56f-2d75-40f8-af52-7ca31d6bad93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3fba125f-1c08-46b4-a99e-86f78feaa160\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3fba125f-1c08-46b4-a99e-86f78feaa160')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3fba125f-1c08-46b4-a99e-86f78feaa160 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[mask].shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gAqKxcFlQjDv",
        "outputId": "469adee8-cbd2-40b8-d61a-3d0b9c685fd2"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8872, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Beacause we are dealing with only transactions not the cancelation so we can remove them\n",
        "df = df[~mask]\n",
        "df\n",
        "# By this (~) symbol we can simply taking that data which is not in the mask"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "d8-D0vo_QphV",
        "outputId": "f2536b0b-7b22-4e20-aa32-3c7dc354c025"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0         536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1         536365     71053                  WHITE METAL LANTERN         6   \n",
              "2         536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3         536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4         536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "...          ...       ...                                  ...       ...   \n",
              "541904    581587     22613          PACK OF 20 SPACEBOY NAPKINS        12   \n",
              "541905    581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n",
              "541906    581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n",
              "541907    581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n",
              "541908    581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0        12/1/10 8:26       2.55     17850.0  United Kingdom  \n",
              "1        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "2        12/1/10 8:26       2.75     17850.0  United Kingdom  \n",
              "3        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "4        12/1/10 8:26       3.39     17850.0  United Kingdom  \n",
              "...               ...        ...         ...             ...  \n",
              "541904  12/9/11 12:50       0.85     12680.0          France  \n",
              "541905  12/9/11 12:50       2.10     12680.0          France  \n",
              "541906  12/9/11 12:50       4.15     12680.0          France  \n",
              "541907  12/9/11 12:50       4.15     12680.0          France  \n",
              "541908  12/9/11 12:50       4.95     12680.0          France  \n",
              "\n",
              "[392732 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-090d1c63-ae09-413d-8e30-778c4af5b8f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/10 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>581587</td>\n",
              "      <td>22613</td>\n",
              "      <td>PACK OF 20 SPACEBOY NAPKINS</td>\n",
              "      <td>12</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>0.85</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>581587</td>\n",
              "      <td>22899</td>\n",
              "      <td>CHILDREN'S APRON DOLLY GIRL</td>\n",
              "      <td>6</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>2.10</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>581587</td>\n",
              "      <td>23254</td>\n",
              "      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n",
              "      <td>4</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>581587</td>\n",
              "      <td>23255</td>\n",
              "      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n",
              "      <td>4</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.15</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>581587</td>\n",
              "      <td>22138</td>\n",
              "      <td>BAKING SET 9 PIECE RETROSPOT</td>\n",
              "      <td>3</td>\n",
              "      <td>12/9/11 12:50</td>\n",
              "      <td>4.95</td>\n",
              "      <td>12680.0</td>\n",
              "      <td>France</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>392732 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-090d1c63-ae09-413d-8e30-778c4af5b8f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-090d1c63-ae09-413d-8e30-778c4af5b8f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-090d1c63-ae09-413d-8e30-778c4af5b8f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bab65c1d-a022-42b7-9902-6429d7cbfb1e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bab65c1d-a022-42b7-9902-6429d7cbfb1e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bab65c1d-a022-42b7-9902-6429d7cbfb1e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_399f56a1-ac01-446f-9837-714b04c7ce03\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_399f56a1-ac01-446f-9837-714b04c7ce03 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "74k-IFYvQ-Ol",
        "outputId": "6737fdbe-e4f9-4e5e-d364-2ca685f4a5bd"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(392732, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()\n",
        "# we can see the minimum values here removed and it is givving the right thing\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Ba8Qvm0ZRGJh",
        "outputId": "b9412f93-7220-4fe8-bb4d-2ceb0ddeebc4"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Quantity      UnitPrice     CustomerID\n",
              "count  392732.000000  392732.000000  392732.000000\n",
              "mean       13.153718       3.125596   15287.734822\n",
              "std       181.588420      22.240725    1713.567773\n",
              "min         1.000000       0.000000   12346.000000\n",
              "25%         2.000000       1.250000   13955.000000\n",
              "50%         6.000000       1.950000   15150.000000\n",
              "75%        12.000000       3.750000   16791.000000\n",
              "max     80995.000000    8142.750000   18287.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e640d957-ed10-4a2a-b2c2-70c086f63a6e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>392732.000000</td>\n",
              "      <td>392732.000000</td>\n",
              "      <td>392732.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>13.153718</td>\n",
              "      <td>3.125596</td>\n",
              "      <td>15287.734822</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>181.588420</td>\n",
              "      <td>22.240725</td>\n",
              "      <td>1713.567773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>12346.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>13955.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.950000</td>\n",
              "      <td>15150.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>3.750000</td>\n",
              "      <td>16791.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>80995.000000</td>\n",
              "      <td>8142.750000</td>\n",
              "      <td>18287.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e640d957-ed10-4a2a-b2c2-70c086f63a6e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e640d957-ed10-4a2a-b2c2-70c086f63a6e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e640d957-ed10-4a2a-b2c2-70c086f63a6e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fbe8aa09-46a4-4fa0-b17a-9258a290b801\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fbe8aa09-46a4-4fa0-b17a-9258a290b801')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fbe8aa09-46a4-4fa0-b17a-9258a290b801 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# we can see the minimum values here removed and it is givving the right thing\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 137695.79920361456,\n        \"min\": 1.0,\n        \"max\": 392732.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.15371805709746,\n          6.0,\n          392732.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138468.10836907235,\n        \"min\": 0.0,\n        \"max\": 392732.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.1255955307945373,\n          1.95,\n          392732.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134223.55387290215,\n        \"min\": 1713.5677729984204,\n        \"max\": 392732.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15287.734821710479,\n          15150.0,\n          392732.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# here we have one more problem the minimum unit price is zero that mean they are fiving something free\n",
        "# so lets check for the unit price\n",
        "mask = df['UnitPrice'] == 0\n",
        "df[mask].shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vOcOLbnORRMf",
        "outputId": "51c89ca6-301f-49fb-bb7d-7c805bfcb5c7"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(40, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we will again resign the data for unitprice and drop these all the information which is making us confuse\n",
        "df = df[df['UnitPrice'] > 0 ]\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zirdGuK2SnXg",
        "outputId": "3e7b2523-268f-4711-9de1-d9e6636115d8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(392692, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GxalBmKeaf1s",
        "outputId": "32473d9d-481a-45bf-9d2a-9079308e2da8"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate',\n",
              "       'UnitPrice', 'CustomerID', 'Country'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# now lets convert the column invoice date into the date time formate\n",
        "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'] , format = '%m/%d/%y %H:%M')\n",
        "df['InvoiceDate'].dtype\n",
        "# so t is succes fully converted in date time format"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hjZPgXhsa1df",
        "outputId": "b3a863ee-5492-4b94-f30f-527d18605816"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('<M8[ns]')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets extend the day name form this column\n",
        "df['InvoiceDate'].dt.day_name()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "6Fhm2-7FbbOk",
        "outputId": "d478f8f9-60a9-4a8a-96ed-dc0e4ca48d12"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         Wednesday\n",
              "1         Wednesday\n",
              "2         Wednesday\n",
              "3         Wednesday\n",
              "4         Wednesday\n",
              "            ...    \n",
              "541904       Friday\n",
              "541905       Friday\n",
              "541906       Friday\n",
              "541907       Friday\n",
              "541908       Friday\n",
              "Name: InvoiceDate, Length: 392692, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceDate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541904</th>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541905</th>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541906</th>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541907</th>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>541908</th>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>392692 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# like this we can extend everything from this columns like day name , year , month, day,hour, minute ,month_name\n",
        "df['day'] = df['InvoiceDate'].dt.day_name()\n",
        "df['year'] = df['InvoiceDate'].apply(lambda x : x.year)\n",
        "df['month'] = df['InvoiceDate'].apply(lambda x:x.month_name)\n",
        "df['hour'] = df['InvoiceDate'].apply(lambda x:x.hour)\n",
        "df['month_num'] = df['InvoiceDate'].apply(lambda x:x.month)\n",
        "df['day_num'] = df['InvoiceDate'].apply(lambda x:x.day)\n",
        "df['minute'] = df['InvoiceDate'].apply(lambda x:x.minute)\n"
      ],
      "metadata": {
        "id": "RZTp99rwbwjk"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# we can extract one more column is total_amount\n",
        "df['total_amount'] = df['Quantity'] * df['UnitPrice']\n"
      ],
      "metadata": {
        "id": "j2O7Q7HqdKx9"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# lets check the dataset\n",
        "df.head()\n",
        "# we have done one mistake to generate the month name so we agin have to do this\n",
        "# first we have to drop the month column\n",
        "df.drop('month' , axis = 1 , inplace = True)"
      ],
      "metadata": {
        "id": "WCtBkCaXdgsJ"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# now we have to generate again the month column\n",
        "df['month'] = df['InvoiceDate'].apply(lambda x:x.month_name())"
      ],
      "metadata": {
        "id": "8QiCpYuZdjmi"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "V6p_d1ezeC-X",
        "outputId": "c5e015f6-bc42-4e39-e6e1-acf29f491ead"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country        day  year  \\\n",
              "0 2010-12-01 08:26:00       2.55     17850.0  United Kingdom  Wednesday  2010   \n",
              "1 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  Wednesday  2010   \n",
              "2 2010-12-01 08:26:00       2.75     17850.0  United Kingdom  Wednesday  2010   \n",
              "3 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  Wednesday  2010   \n",
              "4 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  Wednesday  2010   \n",
              "\n",
              "   hour  month_num  day_num  minute  total_amount     month  \n",
              "0     8         12        1      26         15.30  December  \n",
              "1     8         12        1      26         20.34  December  \n",
              "2     8         12        1      26         22.00  December  \n",
              "3     8         12        1      26         20.34  December  \n",
              "4     8         12        1      26         20.34  December  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f847dba8-8cd5-46d3-92a4-21e5c2080925\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>day</th>\n",
              "      <th>year</th>\n",
              "      <th>hour</th>\n",
              "      <th>month_num</th>\n",
              "      <th>day_num</th>\n",
              "      <th>minute</th>\n",
              "      <th>total_amount</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>2010</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>15.30</td>\n",
              "      <td>December</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>2010</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>20.34</td>\n",
              "      <td>December</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>2010</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>22.00</td>\n",
              "      <td>December</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>2010</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>20.34</td>\n",
              "      <td>December</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>2010</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>20.34</td>\n",
              "      <td>December</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f847dba8-8cd5-46d3-92a4-21e5c2080925')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f847dba8-8cd5-46d3-92a4-21e5c2080925 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f847dba8-8cd5-46d3-92a4-21e5c2080925');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4c38b54a-f1f4-416a-804c-7e2612e6f756\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c38b54a-f1f4-416a-804c-7e2612e6f756')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4c38b54a-f1f4-416a-804c-7e2612e6f756 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we have converted the date column into so many factores to exploratory data nalysis"
      ],
      "metadata": {
        "id": "h3R_Y6RyeE6W"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EDA"
      ],
      "metadata": {
        "id": "izxbD5njeWcr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# lets create a new decription dataframe for see the bar plot\n",
        "df_desc = pd.DataFrame(df['Description'].value_counts().reset_index())\n",
        "df_desc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "HXm1ZO4GeV31",
        "outputId": "a8e60362-4930-4861-f1c0-05373af9ab8a"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                             Description  count\n",
              "0     WHITE HANGING HEART T-LIGHT HOLDER   2016\n",
              "1               REGENCY CAKESTAND 3 TIER   1713\n",
              "2                JUMBO BAG RED RETROSPOT   1615\n",
              "3          ASSORTED COLOUR BIRD ORNAMENT   1395\n",
              "4                          PARTY BUNTING   1389\n",
              "...                                  ...    ...\n",
              "3872          GREEN WITH METAL BAG CHARM      1\n",
              "3873          WHITE WITH METAL BAG CHARM      1\n",
              "3874   BLUE/NAT SHELL NECKLACE W PENDANT      1\n",
              "3875             PINK EASTER HENS+FLOWER      1\n",
              "3876         PAPER CRAFT , LITTLE BIRDIE      1\n",
              "\n",
              "[3877 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2ede7fdd-00de-4f6d-ab28-4abb0ccef63c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Description</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>REGENCY CAKESTAND 3 TIER</td>\n",
              "      <td>1713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>JUMBO BAG RED RETROSPOT</td>\n",
              "      <td>1615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ASSORTED COLOUR BIRD ORNAMENT</td>\n",
              "      <td>1395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>PARTY BUNTING</td>\n",
              "      <td>1389</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3872</th>\n",
              "      <td>GREEN WITH METAL BAG CHARM</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3873</th>\n",
              "      <td>WHITE WITH METAL BAG CHARM</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3874</th>\n",
              "      <td>BLUE/NAT SHELL NECKLACE W PENDANT</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3875</th>\n",
              "      <td>PINK EASTER HENS+FLOWER</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3876</th>\n",
              "      <td>PAPER CRAFT , LITTLE BIRDIE</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3877 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ede7fdd-00de-4f6d-ab28-4abb0ccef63c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2ede7fdd-00de-4f6d-ab28-4abb0ccef63c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2ede7fdd-00de-4f6d-ab28-4abb0ccef63c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2880efb7-8897-4baf-a258-d927ce9f8af9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2880efb7-8897-4baf-a258-d927ce9f8af9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2880efb7-8897-4baf-a258-d927ce9f8af9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_66bd99bf-d983-48fe-b11a-8132f7bf76b4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_desc')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_66bd99bf-d983-48fe-b11a-8132f7bf76b4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_desc');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_desc",
              "summary": "{\n  \"name\": \"df_desc\",\n  \"rows\": 3877,\n  \"fields\": [\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3877,\n        \"samples\": [\n          \"SET 12 COLOURING PENCILS DOILEY\",\n          \"5 STRAND GLASS NECKLACE AMETHYST\",\n          \"WOODLAND SMALL BLUE FELT HEART\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 156,\n        \"min\": 1,\n        \"max\": 2016,\n        \"num_unique_values\": 516,\n        \"samples\": [\n          213,\n          16,\n          75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# top 5 product\n",
        "sns.barplot(data = df_desc.head(),x ='Description' , y ='count' )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 713
        },
        "id": "H0FmV34RgWZa",
        "outputId": "49638d77-8262-4135-d313-1efd46963e3c"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Description', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# so these are the top selling products\n",
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdKCYNX1gq2Q",
        "outputId": "b330f14d-8eb1-4fe7-f863-4611f24ef524"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate',\n",
              "       'UnitPrice', 'CustomerID', 'Country', 'day', 'year', 'hour',\n",
              "       'month_num', 'day_num', 'minute', 'total_amount', 'month'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we can do the same thing for the country\n",
        "country_df = pd.DataFrame(df['Country'].value_counts().reset_index())\n",
        "country_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "1KxhLEJNhxBf",
        "outputId": "017730f8-d3a8-45e3-d047-6e0c75c56601"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Country   count\n",
              "0         United Kingdom  349203\n",
              "1                Germany    9025\n",
              "2                 France    8326\n",
              "3                   EIRE    7226\n",
              "4                  Spain    2479\n",
              "5            Netherlands    2359\n",
              "6                Belgium    2031\n",
              "7            Switzerland    1841\n",
              "8               Portugal    1453\n",
              "9              Australia    1181\n",
              "10                Norway    1071\n",
              "11                 Italy     758\n",
              "12       Channel Islands     747\n",
              "13               Finland     685\n",
              "14                Cyprus     603\n",
              "15                Sweden     450\n",
              "16               Austria     398\n",
              "17               Denmark     380\n",
              "18                Poland     330\n",
              "19                 Japan     321\n",
              "20                Israel     245\n",
              "21           Unspecified     241\n",
              "22             Singapore     222\n",
              "23               Iceland     182\n",
              "24                   USA     179\n",
              "25                Canada     151\n",
              "26                Greece     145\n",
              "27                 Malta     112\n",
              "28  United Arab Emirates      68\n",
              "29    European Community      60\n",
              "30                   RSA      57\n",
              "31               Lebanon      45\n",
              "32             Lithuania      35\n",
              "33                Brazil      32\n",
              "34        Czech Republic      25\n",
              "35               Bahrain      17\n",
              "36          Saudi Arabia       9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1e999064-dbd3-4d21-9c1e-f373d422e233\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>349203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Germany</td>\n",
              "      <td>9025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>France</td>\n",
              "      <td>8326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>EIRE</td>\n",
              "      <td>7226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Spain</td>\n",
              "      <td>2479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>2359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>2031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Switzerland</td>\n",
              "      <td>1841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>1453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Australia</td>\n",
              "      <td>1181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Norway</td>\n",
              "      <td>1071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Italy</td>\n",
              "      <td>758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Channel Islands</td>\n",
              "      <td>747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Finland</td>\n",
              "      <td>685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Austria</td>\n",
              "      <td>398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Poland</td>\n",
              "      <td>330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Japan</td>\n",
              "      <td>321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Israel</td>\n",
              "      <td>245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Unspecified</td>\n",
              "      <td>241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Singapore</td>\n",
              "      <td>222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Iceland</td>\n",
              "      <td>182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>USA</td>\n",
              "      <td>179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Canada</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Greece</td>\n",
              "      <td>145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Malta</td>\n",
              "      <td>112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>United Arab Emirates</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>European Community</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>RSA</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Lebanon</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>Bahrain</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Saudi Arabia</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e999064-dbd3-4d21-9c1e-f373d422e233')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1e999064-dbd3-4d21-9c1e-f373d422e233 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1e999064-dbd3-4d21-9c1e-f373d422e233');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-96118a21-87a6-477c-be77-081258c1cc1d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-96118a21-87a6-477c-be77-081258c1cc1d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-96118a21-87a6-477c-be77-081258c1cc1d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d66575f6-b8a8-4aa2-b9f6-34fc429eb204\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('country_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d66575f6-b8a8-4aa2-b9f6-34fc429eb204 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('country_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "country_df",
              "summary": "{\n  \"name\": \"country_df\",\n  \"rows\": 37,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 37,\n        \"samples\": [\n          \"Denmark\",\n          \"Finland\",\n          \"Spain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57253,\n        \"min\": 9,\n        \"max\": 349203,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          380,\n          685,\n          2479\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets create this same bar plot for the top selling country\n",
        "sns.barplot(data = country_df.head(10) , x = 'Country' , y = 'count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 703
        },
        "id": "alBUpFRpiMJ5",
        "outputId": "4a2f4768-94eb-4968-ffd4-12415795d126"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Country', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "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WJgef/xxHT58WFlZWRo1apRatGihu+66S6mpqVe0jkpj6dKlql27toYMGVLs/LCwMDVr1sx4/OWXX+qhhx5SWFiY2rVrp+eee87t1wzXKQlffvmlRo4cqRYtWmjUqFHGNvnggw80ZcoUtWrVSpGRkVq6dKkk6ZNPPlG3bt3UokULDR8+XA6Hw2jz1KlTeuGFF9StWzc1b95cnTp10pQpU5STk+PWV9fw6rfeeksdO3ZUy5YtNXToUOPvIj8/X1FRUZo7d67H6xw9erR69uxZ+hVpEq7TPf/+978rKipKkZGRkqRdu3Zp8ODBio6OVnh4uHr06OGx33Bt+61bt2rcuHGKiIhQx44dlZyc7LGcXbt2qX///mrRooUiIiL00EMPaevWrcb8vLw8zZkzRx07dtTtt9+u7t27F3uKHK6t6tWr66abbtKvv/5a0V35w3A4HKpTp06x884fjefa/y1ZskTt27dX8+bNNWTIEGVkZLg9Z9asWbrvvvsUERGh9u3ba+zYsR41F556mpCQoIiICP3000965JFH1Lx5c91777366quvyvCVVi5Dhw7VP//5T+3cufOiNQ6HQ1OnTlV0dLRuv/12Pfjgg9qyZYsxv0+fPvrmm2/05ZdfGsdPFx5brF27Vt26dVNERISeeOIJj+OnkuwLXccVmzZt0v3336/Q0FB9/vnnxfb59ddf11//+le1bNlSkZGRGjRokNLT04ttb/v27XrggQcUHh6unj176vvvv3erK8mxXX5+vl555RV16NBBt99+u6KjozV48GCPz+/rSY0aNdyOJUv7ebVjxw498MADCg0N1X333aetW7eqR48ebkHWhaeJud6LF7rwuNX1Hl6zZo26du2q5s2ba/DgwcrOztaRI0cUFxeniIgI3XPPPdflZWpKsl9cuHChOnToYEwvKioyjj3PFx0drSVLlkhy/z5x+PBhde7cWZI0atQo4z18+PBhTZw4sdjLWZx/+v/1/t69Ht14440KCAjQ4cOHVVRUpEWLFqlTp066/fbbdffdd2vVqlVu9a730+7du9WrVy+Fhobqrbfeuuh2v9hp10OHDnX7biyV7Pvll19+qX79+ikyMlItWrTQQw89pM2bN5fT2qm8nE6n1qxZo3bt2qlfv37KyspyO7642CnOF+4v9+7dq4EDB6pt27Zq3ry5unXrZnwHmThxov7v//5Pe/fuNbap67kXex+W9PvnhS7cb2dkZGjSpEnq3LmzwsLC1LVrV82ZM0d5eXlXve7KAyP9TGT8+PF6+OGH1a9fP73zzjuaOHGiQkNDFRwc7FH70EMP6ejRo1qzZo0xhNrX11eSdOjQIfXu3Vu33HKLZsyYIYvFosWLF6tv375au3atkZDHx8frq6++0vjx49WwYUO9/fbbWrNmTYn7u23bNi1YsEAdO3bU3//+d7fA71LmzZunzp07a968edq1a5cSEhLUuHFjPfLII5KkPXv2aNSoUerYsaPi4+N15MgRjRkzxuNNuGLFCr366qvq37+/7rjjDn399dd65plnil2vX331lUaPHq2goCB9+OGHGjFihBYuXGh8gEjS8ePHNWPGDA0ZMkTe3t6aNm2axo8fr2rVqqlVq1Z6+OGH9c477+jpp59W8+bN1aBBgxKvqytRUFCgnTt3qlu3biUazbd27VqNGTNGDz74oEaMGKHjx49r9uzZcjgcHkHas88+q/vvv18LFy50+2I6b948de3aVa+++qo+++wzzZgxQ5mZmfrmm2/09NNPKzc3V9OmTdPf//53vfjii5LO/epWWFioMWPGKCAgQL/99psWL16soUOH6s0333Rb7ueff66DBw9qypQpOnHihKZPn64XX3xRc+fOVZUqVfSXv/xFH3zwgUaNGmX0KysrSxs3bix2m5rZhQG46321fPlyNW/eXC+99JJR8+uvv6pFixZ65JFHZLPZtHPnTk2ePFlOp1N/+ctf3Np57rnn1KNHDy1cuFCfffaZZs2apZCQEMXExEiS/vWvf+nJJ59UeHi4pk2bJrvdru+//94tSBo1apR27typYcOGKTg4WJs2bdLTTz8tu92uO++8szxXi6lduM0lXdFI3qKiIh09elR//vOfPeY5nU6P9i0WS4n31yjebbfdplWrVqlhw4bq0KGDateufdHaDRs2qEGDBpo6daocDodmzZqlESNG6B//+IdR8/vvv2vQoEGqU6eOMjMztXTpUvXp00effPLJJf8W8vPzNX78eD3xxBMaOnSokpOTNXLkSH3++eeqVatWmb7myqBjx45q1qyZFi5cqJSUFI/5eXl56tevn37//XeNHj1adevW1UcffaRBgwYZX1Cee+45Pf3006patapx6nu9evWMNn744QdlZmZq/PjxKiws1IwZM/T0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w20EUnHq1q2r/Px8t7s8//Of/zTFnVevREn3ixEREfL29taiRYvUtGlT+fr6KiAgQDfffLMWLVqkKlWqXPKabReOknP5/fffNWzYMIWFhRV7pojZ3rvXm9DQUFWpUsXjO9mnn36qG264odhRtue72HZ3jc48P7DJzMz0GAleku+XrrbPP7Y+cuSIdu3adcm+mcnp06e1ceNG3XXXXVq+fLnbf3PmzFFBQYFSU1ON75jnf27s37//oiMiq1SpojZt2uipp55Sbm6uMdDgSj+Py+r7Z1l/jy1vjPSrpKKjo9WqVSsNHz5cw4YN0y233KKMjAwtWbJEVqvV4xbipREcHKyCggItW7ZMERER8vX1VVBQkEaOHKmePXsqLi5ODz/8sP70pz/pf//7n7755hu1atVK9957r26++WZ16dJFL7/8ss6ePWvcJerCtL4kbDabFi1apCeeeEKDBw/Wm2++eVV3ORs0aJB69uypESNG6OGHH9avv/6q119/XT4+PsaXIi8vLz311FN66aWXdMMNNygqKkpbt27V9u3b3dr685//rK5du2rGjBk6c+aMAgMD9dFHH2nXrl1atGhRqftY3jp06KCnnnpK8+fP148//qju3burTp06ysnJ0Y4dO3T8+HHVqFFDFotFEydO1Pjx43Xq1Cl16NBB1apV06+//qpNmzZpzJgxJb62wZW644479MILL2jhwoXGjWe2bdt2VW0+/PDDxo0kHnzwwTLqqTm5TttMTk5WQECAvL29lZSUJF9f38uOSiiO6y5pffv21aOPPio/Pz/997//Va1atdSzZ09FRUWpY8eOGjBggAYMGKCQkBCdPn1a+/bt08GDB8t1ZI2ZFRUV6bvvvvOYfsMNNxjXcyyJfv36acWKFUpOTna7a7fD4Si2fdfFk1E69913nzp27Kjo6GjVqVNHx44d04oVK3TixAmPmzzVqFFDAwcO1MCBA5WTk6NZs2YpLCzMuJ5fVFSUli1bphdffFFdunTRrl273K5Ni+Ldd999WrhwobZv364GDRpIkh544AGtWrVKTzzxhPr3768mTZooJydHe/bsMe4GKZ37weyDDz7Q559/rtq1a6tOnTol/pGsrPeFrouaT5o0Sb1799bevXu1dOlSj9MBS6Kkx3ZDhw7VbbfdpmbNmqlatWr64osvlJ2d7XaB9crs/P1mfn6+/vvf/+q1117TzTffrFatWqlKlSql2kZ9+/bVypUrNWjQIMXFxcnhcGjhwoWqVavWJX+EjImJUfXq1TV58mQNHDhQR48e1fLly91OG/wjKOl+sUaNGmratKm++eYb9evXz5jeqlUrrVy5Ui1atLjkuqtdu7bsdrs++eQTNWzYUDabTSEhIfrb3/6mrKwsTZkyxbiGuXTue0qzZs1M8d69ngUEBOjxxx9XSkqKbDabwsPDtWnTJq1Zs0bPPvvsZS/BcLHtXq9ePTVv3lwLFy5UzZo15e3t7XbzLJeSfL90DaaYPXu2ioqKdOrUKc2fP/+Sl78xm40bN+rUqVPq06dPsTcuWbJkidasWaPevXurfv36evnllzVu3Djl5uYqKSnJbcTmjz/+qFdeeUWxsbFq1KiRcnNzlZiYqAYNGhg33QkODtZ7772nNWvW6KabblKtWrU8boh2vrL6/nnHHXdo+fLlWrFihZo0aaKPPvpIBw8evOJ2rhVCv0rKarUqMTFR8+fP19KlS5WRkSFfX1+1a9dOCQkJZbLz6Nixox599FElJSXp999/V+vWrfXmm2/qpptu0urVqzVv3jw9//zzOnXqlGrXrq3WrVsrJCTEeP7LL7+sF154QbNmzZLNZtNf/vIXtWnTxrhb6JXw9fXVkiVL9Oijj2rAgAGlOsXQpVmzZpo3b55xO/tbbrlFM2bM0BNPPOG2A+/Tp48cDofefvttrVy5UpGRkZo2bZoGDBjg1t7f//53zZkzx7jDZVBQkObPn18mpyKXp3Hjxqlly5Z666239Pzzzys3N1d+fn667bbb9PLLLxt3bu3evbvsdrsWL15s/ELRoEEDtW/fvkTXJCmt3r176/Dhw1qxYoVxJ7TZs2fr4YcfLnWbN998s5o0aaLGjRuX6yhFs5g9e7amTJmiiRMnyt/fX3369NGpU6f0+uuvX3FbrVq10vLlyzVv3jxNmjRJVqtVt9xyi0aPHm3UzJ8/X0lJSVq5cqWOHDmimjVr6pZbbiGgvQpnzpxxu8OfS8+ePa/oC4i/v78ef/xxJScn65dffjEOpnbu3Fls+zNnzjTt3V2vheHDh+uLL77QjBkzlJmZqVq1aikkJERvvPGGR3DSpUsX1atXT88995wcDofuuOMOtzvP3XnnnRo/frxWrFih999/Xy1atFBiYuJ1dTfViuD68c91p1Dp3Jf75cuXKyEhQYsXL9bx48fl7++vZs2auV3yZODAgfrll180YcIEORwODR8+3LibZEmU5b4wJCRE06dP14IFCzRo0CA1bdpUr776qtu+90qU5NiuRYsW+vTTT7V06VIVFhYqMDBQs2bNcruZRGV2/n7T29tb9erV0/3336/hw4cbIzdKs43q1Kmj5ORkTZs2TSNHjlTjxo31zDPP6IUX/r/27iwk6u6P4/gn+2dlLjmokJpeBE5ZgW2WkZRLhREuURZEZBFUTGXdtIiUqdlm0aYkWCYSUkSCUyEtVFQkLVh5Y1RUU7aKhZUX4/a/eGhoHuvvOE88k/N/v+7m/M7v8EVRPB/Pkvs/j4Px9/fXoUOHtHv3bplMJo0aNUp79uz5Lf/g70t683tx0qRJqq+vt9vGGx0drcrKyh53Q3l4eGjnzp3av3+/MjIyZLVadeXKFT1//lytra1atWqVXf+QkBDbLoi+/rPb123cuFE+Pj46c+aMjh49qpCQEG3fvl2LFi3q8d1ffd9DQ0NVWFio7OxsbdmyRQEBAVq/fr3Onz9vt8rekfmlp6enDh8+rNzcXGVmZmrYsGFavXq1amtr7YJkd3bu3DkFBwf/8qbi1NRUFRQU6O3btzpy5IhycnKUmZmpsLAwZWVladeuXba+gYGBCggIUElJid6/fy8fHx9NnDhRe/futYW88+fP16NHj5SXl6fPnz8rLS3Nboy/+13zT5PJpE+fPunQoUOS/roMNDs7u9vvjz9Fv67vV8oAbuz27dvKyMhQRUUF57y5MYvFolmzZungwYNMeAH0efHx8ZoxY4a2bt3q6lIAOOHFixdKSkpSQUFBtzPiAPRtzC/RV7DSD24pJydHMTExGjp0qJ4+fari4mJFRkY6fbAv/myfPn3S8+fPVVRUpODgYCUkJLi6JAAA8H9m3759MhqNCgoK0qtXr1RSUqLAwEDNmjXL1aUB+IeYX6KvIvSDW2ppabEt8/X29lZsbKw2bdpku9kQ7uXq1avKyspSeHi49u7da3coMgAAwL+hra1NhYWFampq0qBBgxQdHa2NGzf2eMskgD8f80v0VWzvBQAAAAAAANwMsTQAAAAAAADgZgj9AAAAAAAAADdD6AcAAAAAAAC4GUI/AAAAAAAAwM0Q+gEAAAAAAABuhtAPAAAAAAAAcDP/cXUBAAAA6HssFotKS0t169YtffjwQQMGDFBERISSkpK0cOFCDRo0yKX1nTx5UoMHD9a8efNcWgcAAICr9Ovq6upydREAAADoO65du6bMzEx5enoqJSVFERERamtr0/3793Xx4kWlpaUpLy/PpTXOnTtX/v7+qqiocGkdAAAArsJKPwAAADjs1atX2rBhg4KDg1VeXq6goCDbs8WLF+vly5e6du2a6wp0Qmtrq7y8vFxdBgAAwG/FmX4AAABwWGlpqVpbW7Vjxw67wO+78PBwLV26VJLU3t6uoqIiJSYmasyYMYqPj9f+/ftltVrt3jEajTp8+HC3seLj47V582bb57Nnz8poNOr+/fvauXOnpkyZoqioKJlMJjU3N9u99+TJE925c0dGo1FGo1FLliyxG+POnTvKyclRTEyMpk+frtraWhmNRl26dKlbHWazWUajUXV1dc590QAAAFyAlX4AAABw2NWrVzV8+HCNHz++x77Z2dmqqqrS7NmztWzZMj169EglJSV69uyZioqKnK4hPz9fvr6+WrNmjRobG1VeXq7c3FwdOHBAkpSVlaW8vDx5eXlp1apVkqSAgAC7MbZv3y6DwSCTyaTW1lZNnjxZw4YNk9ls1syZM+36ms1mhYWFady4cU7XDAAA8G8j9AMAAIBDvn79qvfv3yshIaHHvg0NDaqqqtKCBQuUn58v6a/tvwaDQcePH1dtba2mTJniVB1Dhw7V8ePH1a9fP0lSZ2enKioq9OXLF/n4+CgxMVEHDhyQv7+/UlJSfjqGn5+fTpw4of79+9vakpOTVVZWZhtHkpqbm3Xr1i1beAgAANBXsL0XAAAADvn69askaciQIT32vX79uiRp2bJldu3Lly+3e+6M9PR0W+AnSRMnTlRHR4caGxt7NcaPgZ8kpaSkyGq1qqamxtZ24cIFtbe3Kzk52el6AQAAXIHQDwAAAA7x9vaWJH379q3Hvo2NjfLw8FBYWJhde2BgoHx9fXsV0P1dcHCw3WdfX19JUktLi8NjhIaGdmsbMWKExo4dK7PZbGszm82KiopSeHi4k9UCAAC4BqEfAAAAHOLt7a2goCA9efLE4Xd+XJHXWx0dHT9t9/D4+Z+wXV1dDo89cODAn7anpqbq7t27evfunSwWix48eMAqPwAA0CcR+gEAAMBhcXFxslgsPd5kGxISos7OTr18+dKuvampSS0tLQoJCbG1+fn5dVulZ7Va9fHjR6frdDZsnDNnjvr3769z586purpaAwYMUFJSktN1AAAAuAqhHwAAABy2YsUKeXl5KTs7W01NTd2eWywWlZeXa/r06ZKk8vJyu+dlZWWSZHsuScOHD9e9e/fs+p0+ffqXK/0cMXjw4F5t9/3OYDAoNjZW1dXVMpvNmjZtmgwGg9N1AAAAuAq39wIAAMBhYWFhKiws1IYNGzRnzhylpKQoIiJCVqtVdXV1qqmp0bx587R06VKlpaXp1KlTamlp0aRJk1RfX6+qqiolJiba3dy7YMECbdu2TWvXrtXUqVPV0NCgmzdvyt/f3+k6R48ercrKShUXFys8PFwGg0ExMTEOvZuamqp169ZJkjIzM52uAQAAwJUI/QAAANArCQkJqq6u1rFjx3TlyhVVVlbK09NTRqNRmzdvVnp6uiQpPz9foaGhqqqq0uXLlxUQEKCVK1dqzZo1duOlp6fr9evXOnPmjG7cuKEJEyaorKxMGRkZTtdoMpn05s0blZaW6tu3b4qOjnY49IuLi5Ofn586OzuVkJDgdA0AAACu1K+rNyceAwAAAG6uvb1dsbGxiouLU0FBgavLAQAAcApn+gEAAAA/uHz5spqbm5WamurqUgAAAJzG9l4AAABA0sOHD/X48WMVFxcrMjJS0dHRri4JAADAaYR+AAAAgKTKykpVV1dr5MiR2rVrl6vLAQAA+Ec40w8AAAAAAABwM5zpBwAAAAAAALgZQj8AAAAAAADAzRD6AQAAAAAAAG6G0A8AAAAAAABwM4R+AAAAAAAAgJsh9AMAAAAAAADcDKEfAAAAAAAA4GYI/QAAAAAAAAA3818bYHAYcIjg5wAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# by this graph we can see the most of transation are comming for the country UK that mean most of the customer are from UK\n",
        "# so each and every country is not necessory to take for the analysis and we can remove other countries"
      ],
      "metadata": {
        "id": "MqPdZDBLiTWR"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['CustomerID'] = df['CustomerID'].astype(str)\n",
        "df['CustomerID'].dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z_OQeVaPkdjV",
        "outputId": "6e2e26e9-f839-46af-c927-d0009af9fe67"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('O')"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets talk about the top 10 coustomers with share values\n",
        "# we can take the customer id and take the value count how many time it has purchased form the store\n",
        "df['CustomerID'].value_counts()\n",
        "# but the data type of this column is not int so we have to convert this first and then come back to count the values\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "USnt8jOVjW-J",
        "outputId": "952f2310-241f-4488-87b8-f14e23e80dae"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID\n",
              "17841.0    7676\n",
              "14911.0    5670\n",
              "14096.0    5111\n",
              "12748.0    4412\n",
              "14606.0    2677\n",
              "           ... \n",
              "16765.0       1\n",
              "13302.0       1\n",
              "13270.0       1\n",
              "16148.0       1\n",
              "17846.0       1\n",
              "Name: count, Length: 4338, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17841.0</th>\n",
              "      <td>7676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14911.0</th>\n",
              "      <td>5670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14096.0</th>\n",
              "      <td>5111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12748.0</th>\n",
              "      <td>4412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14606.0</th>\n",
              "      <td>2677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16765.0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13302.0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13270.0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16148.0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17846.0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4338 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets calculate the percentile to each customer for the value count so that will give us the the information about the customers shares\n",
        "(df['CustomerID'].value_counts() / df.shape[0])*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "osWkqOoLj8qx",
        "outputId": "4cbc230d-5efe-4c99-f2bc-60024319f044"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerID\n",
              "17841.0    1.954713\n",
              "14911.0    1.443880\n",
              "14096.0    1.301529\n",
              "12748.0    1.123527\n",
              "14606.0    0.681705\n",
              "             ...   \n",
              "16765.0    0.000255\n",
              "13302.0    0.000255\n",
              "13270.0    0.000255\n",
              "16148.0    0.000255\n",
              "17846.0    0.000255\n",
              "Name: count, Length: 4338, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17841.0</th>\n",
              "      <td>1.954713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14911.0</th>\n",
              "      <td>1.443880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14096.0</th>\n",
              "      <td>1.301529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12748.0</th>\n",
              "      <td>1.123527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14606.0</th>\n",
              "      <td>0.681705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16765.0</th>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13302.0</th>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13270.0</th>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16148.0</th>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17846.0</th>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4338 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# if i am checking about the shares then i can also check how many of customers having how muh of shares together\n",
        "# for this i can use cumulative sum\n",
        "share_df = ((df['CustomerID'].value_counts() / df.shape[0])*100).reset_index()\n",
        "share_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "mRXxBJNMj--_",
        "outputId": "cf828e0c-09ee-4cc3-9ece-507833f9c6ff"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     CustomerID     count\n",
              "0       17841.0  1.954713\n",
              "1       14911.0  1.443880\n",
              "2       14096.0  1.301529\n",
              "3       12748.0  1.123527\n",
              "4       14606.0  0.681705\n",
              "...         ...       ...\n",
              "4333    16765.0  0.000255\n",
              "4334    13302.0  0.000255\n",
              "4335    13270.0  0.000255\n",
              "4336    16148.0  0.000255\n",
              "4337    17846.0  0.000255\n",
              "\n",
              "[4338 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-250d73cf-31a7-45d9-afd9-ea087727ae75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17841.0</td>\n",
              "      <td>1.954713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14911.0</td>\n",
              "      <td>1.443880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>14096.0</td>\n",
              "      <td>1.301529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12748.0</td>\n",
              "      <td>1.123527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>14606.0</td>\n",
              "      <td>0.681705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4333</th>\n",
              "      <td>16765.0</td>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4334</th>\n",
              "      <td>13302.0</td>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4335</th>\n",
              "      <td>13270.0</td>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4336</th>\n",
              "      <td>16148.0</td>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4337</th>\n",
              "      <td>17846.0</td>\n",
              "      <td>0.000255</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4338 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-250d73cf-31a7-45d9-afd9-ea087727ae75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-250d73cf-31a7-45d9-afd9-ea087727ae75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-250d73cf-31a7-45d9-afd9-ea087727ae75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cafb1871-8034-45ac-825d-f1f3a6a63169\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cafb1871-8034-45ac-825d-f1f3a6a63169')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cafb1871-8034-45ac-825d-f1f3a6a63169 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_44042c48-6d53-4182-a4fa-f294db09873e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('share_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_44042c48-6d53-4182-a4fa-f294db09873e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('share_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "share_df",
              "summary": "{\n  \"name\": \"share_df\",\n  \"rows\": 4338,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4338,\n        \"samples\": [\n          \"15612.0\",\n          \"14976.0\",\n          \"13859.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.057425913474507095,\n        \"min\": 0.00025465250119686674,\n        \"max\": 1.9547125991871492,\n        \"num_unique_values\": 460,\n        \"samples\": [\n          0.09473073044523443,\n          0.18360445336294093,\n          0.06901082782435089\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "share_df['count'].head(10).cumsum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "XHO8OBICrGsL",
        "outputId": "f8361435-9893-4830-b7c6-c1fa8639f8aa"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1.954713\n",
              "1    3.398592\n",
              "2    4.700121\n",
              "3    5.823648\n",
              "4    6.505353\n",
              "5    7.107861\n",
              "6    7.636519\n",
              "7    8.098459\n",
              "8    8.522965\n",
              "9    8.939831\n",
              "Name: count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.954713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.398592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.700121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.823648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.505353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7.107861</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7.636519</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8.098459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8.522965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>8.939831</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# i can not focus on only top 10 becouse as it is showing this will cover only 9 % of shares of the sales .\n",
        "# so we can not use this otherwise we will missing on the 91% of the data\n"
      ],
      "metadata": {
        "id": "QdZpfeMfrg7m"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# the numerical columns are 3 in the data set we can see the relation between them\n",
        "# QUantity , total amount , and unit price\n",
        "# lets plot a distribution plot and see the relationship bwetween them\n",
        "num_features = ['Quantity', 'UnitPrice' , 'total_amount']\n",
        "count = 1\n",
        "plt.subplots(figsize = (20,13))\n",
        "for feature in num_features:\n",
        "  plt.subplot(2,2,count)\n",
        "  sns.distplot(df[feature])\n",
        "  plt.title(f\"Distribution of the numeric variables {feature}\",fontsize = 19)\n",
        "  plt.xlabel(f\"{feature}\",fontsize = 15)\n",
        "  plt.ylabel('density',fontsize = 15)\n",
        "  count += 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 832
        },
        "id": "prlZPA7OvL7m",
        "outputId": "0108f5d4-ccc8-4c09-9843-c28bb5e9c433"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1300 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# fro this graph we can see the data is squewd\n",
        "# so we can take a logarithmic distribution\n",
        "count = 1\n",
        "plt.subplots(figsize = (20,13))\n",
        "for feature in num_features:\n",
        "  plt.subplot(2,2,count)\n",
        "  sns.distplot(np.log1p(df[feature]))    # logarithmic values of the plots\n",
        "  plt.title(f\"Distribution of the numeric variables {feature}\",fontsize = 19)\n",
        "  plt.xlabel(f\"{feature}\",fontsize = 15)\n",
        "  plt.ylabel('density',fontsize = 15)\n",
        "  count += 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 851
        },
        "id": "-P85-G2ywNZq",
        "outputId": "69b8dc99-44bb-49d4-8a89-69f773de9d7e"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1300 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# the data was skewed and we are doing logarithmic transformation for making this in normally distributed so this data will have work on the model propperlly\n"
      ],
      "metadata": {
        "id": "Im8YvJ20wqqv"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# we know all the data is related to uk country\n",
        "mask = df['Country'] == 'United Kingdom'\n",
        "df[mask]\n",
        "# lets assigen this to the df itself because it is really a big data\n",
        "df = df[mask]\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dz0uuCgv6EW0",
        "outputId": "83b535bb-fc00-4c62-9f96-c8493e3d8dba"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(349203, 16)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cgmOKylt6Qxp",
        "outputId": "031462e0-3e39-4ef7-bb56-3c29576600cc"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate',\n",
              "       'UnitPrice', 'CustomerID', 'Country', 'day', 'year', 'hour',\n",
              "       'month_num', 'day_num', 'minute', 'total_amount', 'month'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Frame work\n",
        "if we go for the traditional machine learning approach\n",
        "the numerical data will directly understand by the machine and categorical data we need to encode that into numerical data\n",
        "\n",
        "and the encoded data given to the machine . so the machine will calculate them together and it gives them to the model\n",
        "\n",
        "the model will sengment the customers\n"
      ],
      "metadata": {
        "id": "B4qeRIGY6vbn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "***the frame work will handle by business analyst and expertes . this frame work will already implemented . and proven in the industry . ***"
      ],
      "metadata": {
        "id": "Bof-qko-7j94"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# one of the framework we are using here is RFM Framework\n",
        "# R = Recency ( How recently the purchase made by customers )\n",
        "# F = frenquency (How frequently he is purchasing )\n",
        "# M = Moniter   ( How much money they are spending for purchasing )\n",
        "\n",
        "# so instead of all the variable we can use these three points\n",
        "# so i dont need them all the 16 columns i just need to convert them into three columns which gives me much more information\n",
        "# if my number of columns is decrease then the model complexity will decrease so the model will be much more genralized and it will be faster to execution\n",
        "\n",
        "\n",
        "# so that is why these kind of model has developed by the developers"
      ],
      "metadata": {
        "id": "JDSswvIv6S46"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lets see how we can convert them into three diffrent columns\n",
        "# calculate the RFM scores\n",
        "# set the latest date to 2011 -12- 10 as the last invoice date was 2011-12-09\n",
        "latest_date = dt.datetime(2011,12,10)\n",
        "\n",
        "# create the RFM modeling scores for each customer\n",
        "rfm_df = df.groupby('CustomerID').agg({'InvoiceDate':lambda x :(latest_date-x.max()).days,'InvoiceNo':lambda x: len(x),\n",
        "                                       'total_amount':lambda x : x.sum()})\n",
        "\n",
        "# convert the invoice date into type int\n",
        "rfm_df['InvoiceDate'] = rfm_df['InvoiceDate'].astype(int)\n",
        "\n",
        "# rename the columns to frequency , recency , monetary\n",
        "rfm_df.rename(columns = {'InvoiceDate':'Recency','InvoiceNo':'Frequency','total_amount':'Monetary'},inplace = True)\n",
        "\n",
        "rfm_df.reset_index().head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "I3EKsxi8j66m",
        "outputId": "dbff5fe9-ac2a-4870-e28f-51d3972c806b"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  CustomerID  Recency  Frequency  Monetary\n",
              "0    12346.0      325          1  77183.60\n",
              "1    12747.0        2        103   4196.01\n",
              "2    12748.0        0       4412  33053.19\n",
              "3    12749.0        3        199   4090.88\n",
              "4    12820.0        3         59    942.34"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-617ab34f-69ac-4b2e-b801-f279c2588745\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12346.0</td>\n",
              "      <td>325</td>\n",
              "      <td>1</td>\n",
              "      <td>77183.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12747.0</td>\n",
              "      <td>2</td>\n",
              "      <td>103</td>\n",
              "      <td>4196.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12748.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4412</td>\n",
              "      <td>33053.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12749.0</td>\n",
              "      <td>3</td>\n",
              "      <td>199</td>\n",
              "      <td>4090.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12820.0</td>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>942.34</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-617ab34f-69ac-4b2e-b801-f279c2588745')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-617ab34f-69ac-4b2e-b801-f279c2588745 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-617ab34f-69ac-4b2e-b801-f279c2588745');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b170d203-a9c0-4824-b6e1-c191a3dda75e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b170d203-a9c0-4824-b6e1-c191a3dda75e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b170d203-a9c0-4824-b6e1-c191a3dda75e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"rfm_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12747.0\",\n          \"12820.0\",\n          \"12748.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 0,\n        \"max\": 325,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1933,\n        \"min\": 1,\n        \"max\": 4412,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          103,\n          59,\n          4412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32521.62855308034,\n        \"min\": 942.34,\n        \"max\": 77183.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4196.009999999999,\n          942.34,\n          33053.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets describe this dataset\n",
        "rfm_df.describe()\n",
        "# here we can see the quantile of the data like 25% , 50%, 75%, and 100%"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "-WMqbhs1kfji",
        "outputId": "4aab2039-9467-4fe5-9b6e-f1c0de1c73b0"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Recency    Frequency       Monetary\n",
              "count  3920.000000  3920.000000    3920.000000\n",
              "mean     91.742092    89.082398    1858.424654\n",
              "std      99.533485   214.034542    7478.631256\n",
              "min       0.000000     1.000000       3.750000\n",
              "25%      17.000000    17.000000     298.185000\n",
              "50%      50.000000    40.000000     644.975000\n",
              "75%     142.000000    98.000000    1571.285000\n",
              "max     373.000000  7676.000000  259657.300000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8e78140-2570-4dfd-9c5e-45b132993eee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3920.000000</td>\n",
              "      <td>3920.000000</td>\n",
              "      <td>3920.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>91.742092</td>\n",
              "      <td>89.082398</td>\n",
              "      <td>1858.424654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>99.533485</td>\n",
              "      <td>214.034542</td>\n",
              "      <td>7478.631256</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>298.185000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>644.975000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>142.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>1571.285000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>373.000000</td>\n",
              "      <td>7676.000000</td>\n",
              "      <td>259657.300000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8e78140-2570-4dfd-9c5e-45b132993eee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8e78140-2570-4dfd-9c5e-45b132993eee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8e78140-2570-4dfd-9c5e-45b132993eee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1ea1975e-f50b-4392-a0d5-ea3e2b1600bc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ea1975e-f50b-4392-a0d5-ea3e2b1600bc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1ea1975e-f50b-4392-a0d5-ea3e2b1600bc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# here we can see the quantile of the data like 25% , 50%, 75%, and 100%\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1351.9008348718169,\n        \"min\": 0.0,\n        \"max\": 3920.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          91.74209183673469,\n          50.0,\n          3920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2833.142775519572,\n        \"min\": 1.0,\n        \"max\": 7676.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          89.08239795918368,\n          40.0,\n          3920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91039.0427281367,\n        \"min\": 3.75,\n        \"max\": 259657.3,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1858.4246540816325,\n          644.9749999999999,\n          3920.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# lets plot the graph of these tree features\n",
        "count = 1\n",
        "plt.subplots(figsize = (15,10))\n",
        "for feature in rfm_df.columns:\n",
        "  plt.subplot(2,2,count)\n",
        "  sns.distplot(rfm_df[feature])\n",
        "  plt.title(f\"Distribution of the variable {feature}\", fontsize = 16)\n",
        "  plt.xlabel(f\"{feature}\")\n",
        "  plt.ylabel('density')\n",
        "  count += 1\n",
        "#"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 849
        },
        "id": "mFT-ob-sm_Qi",
        "outputId": "287f2d88-3ecd-4675-cf86-89434cada520"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# this is skewed plot so we have to normalise this using log transofmation of the data\n",
        "# treat the negative and zero values to handle infinite number during log tranformation\n",
        "def handle_negative(num):\n",
        "  if num <= 0 :\n",
        "    return 1\n",
        "  else :\n",
        "    return num\n",
        "\n",
        "# apply the function to recency and menetory columns\n",
        "rfm_df['Recency'] = [handle_negative(x) for x in rfm_df['Recency']]\n",
        "rfm_df['Monetary'] = [handle_negative(x) for x in rfm_df['Monetary']]\n",
        "\n",
        "# apply log tranformation to RFM values\n",
        "log_df = rfm_df.apply(np.log, axis = 1).round(3)"
      ],
      "metadata": {
        "id": "rDSef-plqxZN"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# now the data is on same scale\n",
        "# lets plot the distribution of this data\n",
        "count = 1\n",
        "plt.subplots(figsize = (15,10))\n",
        "for feature in log_df.columns:\n",
        "  plt.subplot(2,2,count)\n",
        "  sns.distplot(log_df[feature])\n",
        "  plt.title(f\"Distribution of the variable {feature}\", fontsize = 16)\n",
        "  plt.xlabel(f\"{feature}\")\n",
        "  plt.ylabel('density')\n",
        "  count += 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 867
        },
        "id": "OzVQcx3JwA7e",
        "outputId": "8f0a9f62-dc45-4f97-ec07-c30653b2944b"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABPEAAANiCAYAAAAACFz7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3xT5f4H8M/J6k7TPShtaaGlZe8pIEMEVAQceBXwulDxKo6fgni9OFDEi4jgvOLCiSKiqCgoAjJl79lJ907aZuf8/giNlDZdJE3afN6vV17Qk3Oe831O0vTJ9zxDEEVRBBEREREREREREbktiasDICIiIiIiIiIiooYxiUdEREREREREROTmmMQjIiIiIiIiIiJyc0ziERERERERERERuTkm8YiIiIiIiIiIiNwck3hERERERERERERujkk8IiIiIiIiIiIiN8ckHhERERERERERkZtjEo+IiIiIiIiIiMjNMYlHDjN69GgkJyfbHl27dkWfPn0wYsQIzJgxA6+88gqOHDnSYBkzZsxAcnIy9uzZ00pRN6ymThcuXKi13d3iBIB58+YhOTkZ3377ratDcYrff/8d//jHP9C3b1/be8wR13/Pnj1ITk7GjBkzHBBl++Loa7NixQokJydjxYoVLo2jKee6/NGnTx9MmjQJL774Yp3PAyKitoptN9di261l2Hazj203+w+1Wu30WIhag8zVAVD707dvX8TFxQEAdDodysrKcPLkSezduxcffPABBg4ciJdeegkdO3Z0WgyjR49GTk4OfvvtN8TExDjtPK3l22+/xfz58zFlyhQsXrzY1eG0upMnT+Lhhx+GxWLB4MGDERYWBkEQEBoa2uix7e29QK1nypQpAABRFJGfn4/Dhw9j9erVWLt2LT744AP06dPHxRESETkG226Ox7Yb227U+mrabvWRy+WtGAmR8zCJRw538803Y+rUqbW2iaKIbdu24aWXXsLevXsxffp0fPnll3Uag6+88gq0Wi2io6NbM2S7PvroIxiNRkRERLg6lEY99thjuPfeexEeHu7qUBxu8+bNMBqNuP/++/Hoo4+6OhyP0bNnT/z000/w8fFxdSgucfmXrry8PNx5553IyMjAM888gx9//NFFkRERORbbbq7Bths5GttunpcwJ8/D4bTUKgRBwMiRI/H1118jPj4excXFeOaZZ+rsFx0d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Y8eid+/eMBqN+Ouvv+Dt7W33fVzjxhtvxB9//IGxY8eiX79+0Ov12LNnD6qrq9GnTx88/PDDTYrDma9BQ0aOHIkBAwbgr7/+wsqVK7F06VJIJBK8+eabmD17NtatW4dffvkFycnJiI6Oti2McebMGZjNZkydOtXWy6Nnz55YtGgRnnnmGTz//PNYtWoVunfvDlEUkZ2djVOnTmHOnDm2u9utXefmxnepiRMn4tVXX0VxcTGCg4NtKxgSkfth241tN3vYdmsatt3cu+3WHKNHj8aCBQvwyiuv4IEHHkBcXBw6deoEf39/lJWV4dSpUygpKcG9995ba3qBJUuWYMaMGfjxxx/x119/oV+/ftDpdNi9ezeSk5PRp0+feleKvf322/H111/j+PHjuPbaa9G7d29otVocPXoUUVFRGDt2LDZv3lznuDvuuAO5ublYtWoVbr/9dnTp0gWxsbHw9vZGUVERTp06BbVajYULF6J3795XfF1efvll3HfffTh06BCuueYa9OnTB+Hh4SguLsaZM2dQWlqK06dP1zlOIpHg9ttvx0svvQTAugCap8zb6SxM4pHDHThwwLbktq+vL/z9/ZGUlITu3btjwoQJzR5ONXr0aFRWVmLfvn3IzMzE4cOH4e3tjcjISNx33324/fbbbXc7a9x2222oqqrC999/j61bt9pW17nhhhsc2hAcN24cxowZg3fffdd2xzk1NRV33HGHbWXLS8nlcnz44YdYvnw5Nm/ejB07diA4OBjjxo3DI488YrsLfDmFQoFVq1Zh2bJlOHToEE6dOgWLxYKBAwc22hAUBAFLlizBiBEj8NVXX+H48ePQarUIDQ3F1KlTce+99zr0mjREoVDY/mCvX78e+/btg8FgQFRUFGbMmIF7773X4XOqOPO90KVLF3z//ff48ssvsXnzZpw+fRqHDh2CSqVCZGQk7rrrLowbN65FZU+bNs3WjX/AgAG2udcu16tXL6xduxavv/46jh49it9//x1RUVG444478MADD+DFF19scf3s6dixI9atW4fXX38d+/fvx5YtWxAWFoZJkybhX//6F7744osGj4+JicE333yD119/Hbt370ZFRQWio6Nx3XXX4d57723WhM3OfA0a8vjjj2P69On46aef8OCDDyIxMRERERFYs2YNvv32W/z00084ffo0jh49isDAQISHh2P6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bN++jXHjRrB69Y+8/fa/ueSS6Zx33jgqKysB2LdvL/Pn383UqRM599yx3HXXHHbv3lmvnl27dnLrrTcwefLZXHXVTL766gsWLnyLceNG1JbJyTnOuHEj+OGHb+vtP27cCBYufKvOtoKCfJ5++nFmzDi/tn333XdfNxj/Tz+tYsmShVx66QVMnnw29957B1lZmfWeZ9++vTzwwD1Mm3YO5503jtmzZ/HJJx8B8N13XzNu3AgOHz5Yb7/331/EhAmjKCjIP/1JFUJ0CtITTwjRreTkHAfAz88PgJSUY9x55y2EhIRx3XWzMRi8WLNmNQ8++ABPPrmAiRPPAaCqqop5824lPT2NCy64mKSkJEpLS1m/fi0FBXkEBATgcDj429/ms3v3Ti6++FJiYuJISTnKJ598RGZmBs8882KdWHbv3sWvv67h0kuvwNvbh88/X8bDD/+FL774Dn//AAAKCwu47bbZVFSUc/HFlxIdHUthYQG//PITZrOZyMgoBg4czMqVK7j66mvr1L9y5Qq8vX0YP35S+55UIYQQQoh2UlFRUeeC6anee28her2Oa665DovFil6v5/fft/LAA/eQlNSPm266DY1Gw/fff8u9997BG2+8Q3LyAACOHTvK/PnzCAgI5Kab5mC321i06G0CA4NaHWtxcRFz594EwOWXX0VAQACbNm3g2WefoKqqkquu+lOd8kuXvoeiaLjmmuuoqKjgo4/e5/HHH+add5bUltm6dRN/+ct9BAeHcOWVswgODiYtLY11637j9ttv45xzzuP5559l5coV9OnTt079K1euYOjQ4TIXtBBdiCTxhBBdmqvhV0JVlZn9+/eyePE7eHh4cPbZ4wF45ZUXCQ/vwTvvvI+HhwcAl112JXfeeQv/+c9rtUm8jz/+gJSUYzz11PO12wBuvPFWnE4nAKtWrWDbti289trbDB48pLZMXFwCL7zwDHv27GLgwMG129PTU/nww8+IjIwCYNiwEdx44zWsXv0jl19+NQBvvvk6xcVFvP32e3WGktx66+21zztt2oU8//zTpKenERMTC4DNZmPNmlVMnHgOBoOhLU+pEEIIIUSH+fOf76y37dVX3wTAYqlh4cL38fR0tXWcTifPP/8MQ4eO4MUXX0VRFABmzryM6667mnfe+Q8vv/wGAO+++yZOJ7zxxrv06NEDgEmTzmX27FmtjvXt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dYHjJ598TE8//aS8Xu9J29TWdv45hwwZKqfTqeLi9l8DvfEzaM3FF1+qt956Q6+//opcLpdKS0v0zW9e1u6GGU3vv6FDW7/eYcMC7z23u/XPic68944ePSzTNNXQ0KDzzmt7Cn9XxqI7P+/2Pmfnz1+gd955S//4x9+DSby9e/fos88+U3Jyis47r/W19gAAAAAEkMRDrzFNU3v27JakFtMCT2b+/AU6//yLtG7dWm3btkXbtm3Rv/71tv71r7f1xBOP6qGHHu9SdV5HF8/vjrYSK91p21c6O82yv+pIVejxTDNQ6XbWWV9RcnLbSdqMjI4niy+++FK98carevPN14JJvLfeekM+n09z5lyghISEZu3//vdn9fLLLyolJUU/+ckSTZ48VUlJycHX9l133a533nnrpK+trrwH3n//XT355GOKiYnVkiW/0Omnn6nU1DRFRUXJMAw9+uhDWrXqf7v5em7/3N76GZxo+vTTNWzYcP373++qrCxQ2djeVNqe0Jn3nt8fGK+YmFjNmXN+j8bR3Z93e6+xU0+drIkTT9Hnn+/U5s2fafr00/Xii89Lki677PIu/5IGAAAAGCxI4qHXbNy4XtXVgfWpOjO9LTk5RZde+q3gOlKFhfv1+9/fox07tumRR5brjjvu7pV423L06JFWjx87FjgeGRklu90RPN70ZbSuru4k5x3t0fjS0tIkBdYerK2tabUar6maKTU1rUef+0SpqemSTj5mx8eSlpbeq7H0hPT0DBUW7tcll1za7rTKzpg6dbqGDx+hgwcPaNu2LZoyZZrefPM1SdIll7RMHL377juSpP/8z9s0e/a5LR4/dOhgj8X25XOukSTdcMN/aN68y1s8fvDggTbPb+s10PTe6chroLd+BicyDENz516ixx9/RJ9++rGyskY321DiZNLS0nT48CEdOXK41V9YHD4ceL1HRkYpIaH9quS2ZGRkBGP91a/u7NHke3d/3h1x5ZULdM89v9aLLz6vsWPH66233pTNZtO3vjW//ZMBAACAQW5wlN6gz9XU1OjPf/4fSdKZZ57VbKOFzho1KktXX/0DSYGpV8ez2QLJsqY1m3rLW2+92erx1atflyRNmTJVNtuXOfGmxERhYctNBlwu10kXhu/q9aSnZwSn7L3xxmstHjdNU2++GVhr7WS7UvaUCRMmKiYmVlVVTq1b936LxxsaXPrXv96WJE2f3nOx9NZr4eyzvyLpyyRaT2ragffNN1/TF198rry8fUpPz9Dpp89o0bZpw4bWKs3y8/O0d+/uHo+v6TmHDGk53bOiolyffvpRm+d//PGHqqgob3F848Z1cjqdio2NU07OxHbj6M2fwYm+8Y1vKjExSQ6HQ5de2jKR1ZqmNehae+9JX26QMXXqtGafE12RmpqmMWPGqa6uVh99tKFT5zb9cuFk75Hu/rw74vzzL1JKSqo++ODfevrpJ1VfX68LL7ww+IsIAAAAACdHEg89yjRNbdy4Xj/60Q906NABpaSk6pe/vKND53722SfauHFdi7WYTNPUhg3rJLX8cpmeHkiWFRTk9UD0J7d79+d65pmnmh3bunVLcBfWq676brPHzjgjkIT5xz/+3mzdt/r6ei1b9lsVFxe1+jxN17N/f36nY/zOd74nSXrqqcebJTtN09RTTz2hvXv3KD4+Qd/85rc63XdnREVF6fLLA7v2rljxp2ZVh16vV3/60/0qKytTZuawHl0Dq7deC5deermGDMnUe++9o4cf/nOra86VlZXqn/9sfdfftsyde4ksFovefXeN/vGP55sdO1HTxhv/+Mffg5tZSFJpaanuu+83vZLIbtpY4Z//fEkejyd4vKamRvfdd5dqamraPL+hoUH//d+/V0OD67h4S7RixZ8kBaZQdmSab2/+DE6Unp6h115bo9df/5e+/e3vdOicK6/8jqxWqz744N966603mj328ccf6p///Ick6Tvf+X6345OkH/3ox5Kk3/3uHq1bt7bF46ZpaufOHfr44w+bHW/65ULTBhUn6u7PuyOaqu58Pp+efTawW+/3vve9bvcLAAAADAZMp0WXvfrqy8FdGd1ut5zOSu3Zs1tVVU5JgeqUX/3qzg5vKpGXt1d//vP/KC4uTuPHT1BqapoaGhq0Z88XOnbsqOLj43X99Tc2O+fcc8/Xpk2f6p577tSMGWcFp6p997vf18iRWT12rfPnL9Cjjz6k1atf15gx41RaWqJt27bI7/fryiu/02KnxvPPv0jPP/+svvhil77//W9rypRp8vv9+uKLzxUREaGLL740WJ1zvFNOmazU1DTt2bNb1113tbKzx8pms2nkyFH67nd/0GaM8+Zdoe3bt+mtt97Q9dd/X9Omna6kpCTt2fOFDhwoVFRUlH7zm/uUlJTU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Ll26JMYyMzPRvXt3DB8+vMkciIiIiIiIyLhwJh4RtTv29vbw9fXFzp07UV1djfr6eowbN05nu6KiIjg4OMDW1lYr7urqKrbfqXv37jp92NnZQalUAgDKy8uhVCqxZcsWbNmyRW9u+tapu1txcTGSkpJw8OBBVFZWarWp1WqtxxYWFnByctLpY8KECUhISMCOHTvw2muvQaVSIScnB5GRkZBIJE3mQERERERERMaFRTwiapeefvppvPvuuygtLYW/vz/kcvl/7tPc3FxvXHMTjIaGBgDAs88+i4kTJ+rd1t3d/Z6vUV9fjxdffBGVlZV46aWX4OLiAqlUipKSEixcuFB8DQ0rKyuYmelOqrazs8Po0aORmZmJ1157DdnZ2aipqcGzzz7b5H4SERERERGR8WERj4japTFjxuD999/H6dOnsXbtWr3b9OzZE8eOHYNardaajVdYWCi2Pwh7e3vIZDI0NDTAz8/vnts2Nhvu/PnzuHjxIlasWIHnnntOjN95t937pVAoMHfuXJw9exaZmZkYMGAAHn300Qfuh4iIiIiIiAyPa+IRUbskk8mwaNEizJs3D0FBQXq38ff3R319PTZt2qQV//LLLyGRSODv7/9Ar2lubo5x48Zhz549OH/+vE77nZfSdujQAQDES3E1NLPqNLP7NP+dlpb2QLkAt/evc+fO+Pzzz3HixAnOwiMiIiIiInqIcSYeEbVbjV3SqhEUFAQfHx+sXbsWRUVFcHd3R15eHg4cOICIiAitm1jcr/nz5+P48eOYMmUKJk+ejH79+qGyshL5+fk4duwYfvrpJwCAs7Mz5HI5vvnmG8hkMkilUjz++ONwcXGBs7MzVqxYgZKSEtja2mLPnj06xb77YWlpieDgYGzcuBHm5uYIDg5+4D6IiIiIiIjIOHAmHhGZLDMzM3zyySeIiIhATk4OPvjgAxQUFGDBggWIj49vVp9du3bF1q1bMWnSJOzbtw9Lly5FWloaKisrERcXJ25naWmJxMREmJubY9GiRYiNjcWJEydgaWmJdevWwcPDA59++ilSUlLQp08frFixoln5KBQKAICvry8cHBya1QcREREREREZnkS485otIiJqV/744w8oFAqdNfaIiIiIiIjo4cKZeERE7VhGRgakUinGjh1r6FSIiIiIiIjoP+CaeERE7dDBgwdx4cIFZGRkICwsDFKp1NApERERERER0X/Ay2mJiNqhoKAglJaWYtSoUVi5ciVsbW0NnRIRERERERH9ByziERERERERERERGTmuiUdERERERERERGTkWMQjIiIiIiIiIiIyciziERERERERERERGTkW8YiIiIiIiIiIiIwci3hERERERERERERGjkU8IiIiIiIiIiIiI8ciHhERERERERERkZFjEY+IiIiIiIiIiMjIsYhHRERERERERERk5P4PXMG0SabGjhYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# the distribution of recency and frequency and the monetary alsmost like normally distributed\n",
        "# so we can use this logarithmic transformation into our data"
      ],
      "metadata": {
        "id": "6Decg2kbwHYy"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# aplying the logarithmic transform to the original data of RFM\n",
        "# we have to import the math first\n",
        "import math\n",
        "rfm_df['Recency_log'] =   rfm_df['Recency'].apply(math.log)\n",
        "rfm_df['Frequency_log'] = rfm_df['Frequency'].apply(math.log)\n",
        "rfm_df['Monetary_log'] = rfm_df['Monetary'].apply(math.log)"
      ],
      "metadata": {
        "id": "8cwkxeaWwL84"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rfm_df.head()\n",
        "# we are keeping them both for comparison purpose"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "HKU3ByTZzXey",
        "outputId": "31672cfe-fa8b-49de-ebde-b86f72c30316"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Recency  Frequency  Monetary  Recency_log  Frequency_log  \\\n",
              "CustomerID                                                             \n",
              "12346.0         325          1  77183.60     5.783825       0.000000   \n",
              "12747.0           2        103   4196.01     0.693147       4.634729   \n",
              "12748.0           1       4412  33053.19     0.000000       8.392083   \n",
              "12749.0           3        199   4090.88     1.098612       5.293305   \n",
              "12820.0           3         59    942.34     1.098612       4.077537   \n",
              "\n",
              "            Monetary_log  \n",
              "CustomerID                \n",
              "12346.0        11.253942  \n",
              "12747.0         8.341889  \n",
              "12748.0        10.405873  \n",
              "12749.0         8.316515  \n",
              "12820.0         6.848366  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9509a0fe-5edd-49b5-b1da-eab028af404f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Recency_log</th>\n",
              "      <th>Frequency_log</th>\n",
              "      <th>Monetary_log</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12346.0</th>\n",
              "      <td>325</td>\n",
              "      <td>1</td>\n",
              "      <td>77183.60</td>\n",
              "      <td>5.783825</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.253942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12747.0</th>\n",
              "      <td>2</td>\n",
              "      <td>103</td>\n",
              "      <td>4196.01</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>4.634729</td>\n",
              "      <td>8.341889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12748.0</th>\n",
              "      <td>1</td>\n",
              "      <td>4412</td>\n",
              "      <td>33053.19</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.392083</td>\n",
              "      <td>10.405873</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12749.0</th>\n",
              "      <td>3</td>\n",
              "      <td>199</td>\n",
              "      <td>4090.88</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>5.293305</td>\n",
              "      <td>8.316515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12820.0</th>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>942.34</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>4.077537</td>\n",
              "      <td>6.848366</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9509a0fe-5edd-49b5-b1da-eab028af404f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9509a0fe-5edd-49b5-b1da-eab028af404f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9509a0fe-5edd-49b5-b1da-eab028af404f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98a54abd-d9d9-44ef-b06e-c02abb3ec0ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98a54abd-d9d9-44ef-b06e-c02abb3ec0ff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98a54abd-d9d9-44ef-b06e-c02abb3ec0ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# we are keeping them both for comparison purpose\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12747.0\",\n          \"12820.0\",\n          \"12748.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 1,\n        \"max\": 325,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1933,\n        \"min\": 1,\n        \"max\": 4412,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          103,\n          59,\n          4412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32521.62855308034,\n        \"min\": 942.34,\n        \"max\": 77183.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4196.009999999999,\n          942.34,\n          33053.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.307522814823837,\n        \"min\": 0.0,\n        \"max\": 5.783825182329737,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6931471805599453,\n          1.0986122886681098,\n          5.783825182329737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.009243143284747,\n        \"min\": 0.0,\n        \"max\": 8.392083380373393,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.634728988229636,\n          4.07753744390572,\n          8.392083380373393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7734834776597475,\n        \"min\": 6.848366143637881,\n        \"max\": 11.253942278212147,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.341889352735464,\n          6.848366143637881,\n          10.405873361045636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we have still diffrent scale in our data we can use standard scaler to make them in single scale\n",
        "feature = ['Recency_log','Frequency_log','Monetary_log']\n",
        "\n",
        "# scaling our data\n",
        "X_feature = rfm_df[feature].values\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X_feature)"
      ],
      "metadata": {
        "id": "dfGDWmqfzZL3"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "hamne yaha pr minmix ki jagah standard scaler ka use kia kyuki minmax scaler me ham minimum value se perticular point ki doori dhundhte hai , aur recency mai hamary minimum values hai 1 aur maximum values hai 720(2 year of data ) jo ki ek bahot badi range hai . compare kre agr frequency aur monitorieng mai to islie ham standard scaler ka use kar rhe hai yha pr\n",
        ""
      ],
      "metadata": {
        "id": "cuZB419h1FTd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# now we dont know how many clusters to make in this data\n",
        "# so we can use a albow method to know the clusters number\n",
        "# lets import the kmeans first\n",
        "from sklearn.cluster import KMeans\n",
        "from yellowbrick.cluster import KElbowVisualizer\n",
        "SSE = {}\n",
        "for k in range(1,15):\n",
        "  km = KMeans(n_clusters = k , init = 'k-means++', max_iter = 1000)\n",
        "  km = km.fit(X)\n",
        "  SSE[k] = km.inertia_\n",
        "\n",
        "# plot the graph for SSE and number of clusters\n",
        "visulaizer = KElbowVisualizer(km, k = (1,15),metrics = 'distortion',timing = False )\n",
        "\n",
        "visulaizer.fit(X)\n",
        "visulaizer.poof()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "KhAW62Q8zuRh",
        "outputId": "2e742aa7-6c35-425a-d637-37a9135b11e2"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# so the cluster number is 3\n",
        "# we can make 3 clusters from this data"
      ],
      "metadata": {
        "id": "ODF7jHUV1aGp"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# we are assuming X is Data Array\n",
        "kmeans = KMeans(n_clusters = 3 )\n",
        "kmeans.fit(X)\n",
        "y_km = kmeans.predict(X)\n",
        "\n",
        "# plot the clusters\n",
        "plt.figure(figsize = (10,6))\n",
        "plt.title('Customer segmentation based on Recency and Frequency ')\n",
        "plt.scatter(X[:,0],X[:,1],c= y_km ,s = 50 ,cmap = 'Dark2_r',label = 'Clusters')\n",
        "\n",
        "\n",
        "# plot the anotate the centers\n",
        "centers = kmeans.cluster_centers_\n",
        "plt.scatter(centers[:,0],centers[:,1],c = 'black',s = 200 , alpha = 0.5, marker = 'x')\n",
        "for i ,center in enumerate(centers):\n",
        "  plt.annotate(f'Clusters {i}',(center[0],center[1]),textcoords = 'offset points',xytext = (0,10),ha = 'center')\n",
        "\n",
        "plt.xlabel('Recency')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "PfDGzrAX4OyQ",
        "outputId": "3fe2ec17-9bb7-4848-e137-4e27a1214f60"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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jzOpqalMeno6s2jRIiYyMpIRCoUMw+g/d15++WVm8uTJqvOeYRimurqaGTRoEPPbb7/pbCtCeisKkAjpBhUVFUxAQACzY8cO1s9hEyANGTKE2bp1q1qZzMxMpqioiGEYhjl37hwTEBDAxMbGqh5/8MEH1S5eGYZhKisrmeDgYGbLli1qx9m7d6+qzLFjx5iAgADm22+/bbctLS2NYRiGeeedd5jw8HCmoaFBVUYsFjNRUVHMW2+9xTDMPxcDn3zyic7Xf+TIESYgIICprKxUbZPL5czNmzdVAdn06dPVLiwZ5p8Ls7/++othmJYf+6ioKEYmk6nKnD59mgkICGgXIL388suqMjU1NUxAQACzevXqdtu2b9+uVscrV66o1eHpp59mHnzwQdXfAQEBzPz589XKbNiwgRkxYoTq7xdffJGZNGmS6m+lUskUFBSovX6GYZjFixczjz/+uNbn3R0gff/990xQUBBTXl6utp8nn3ySmTp1qkF1vFvrsdauXau2/dtvv2WCgoKYmpoahmEYpry8nCkoKFAr8/nnnzNhYWGqi7AZM2aogqFW+fn5TG5uLsMw7No6Ly+PCQgIYPbs2dPuteoKkMrKypjAwEDmhx9+UNveen5fu3aNYZiWACkgIIDJyMhQlYmLi2MCAgKYU6dOaW4kRnuAVFdXx3z55ZdMQEAAc+zYMdV2Nuf1Bx98wIwcOVLtvL527Rqzfv16pqqqiklISGACAgKY33//XW0/H330ERMeHq4KtCZNmsSMGTNG9TfDMMymTZuYgIAAprGxUdV+c+bMadc2r7/+OiOVSpmDBw8ygYGBau/x559/zkyaNEntIrstmUzG5ObmMnV1dWrbo6KimPfee0/1N5v6LV26lFm0aJHafo4fP27UACkgIIA5c+aMaptUKmUiIiKYf//732plT548yQQEBDA3btxgGKYleLy77aKjow0OkMrKypigoCDm66+/Viuzfft2JjAwkCkrK1M9JyQkRBXEMQzDHDx4kAkICGBu3brFMIz+c+fatWvtPmu//PILExYWpmpzQu41NAeJkG7A4XAAQG1oizFMmTIFmzdvRkVFBSZMmIARI0bA399fa/mmpibk5eVhwYIFattdXFzg6emJtLQ0te2DBw9W/bt16F9wcHC7bY2NjQBahswMHTpULUGAubk5IiIikJqaqrbvkJAQna8t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H36IU6dOoaioCHFxcXjsscfw1FNPGRSErF27FoWFhfjwww9RWFiI2NhYbNy4EU5OTmoB9tKlS/HHH38AACZOnKhzn2FhYWhubsaOHTtQVFSEAwcOYM+ePQgLC0NmZiaKiopY12/u3LlISUnBDz/8gPz8fJw5cwY7duxg/fyOMDMzw2OPPYZff/1VNafr1q1beP3117F48WLVDYk5c+YgNTUV33//verzcXeKfS8vL9Vn5Pbt27h16xbWr18PFxcXVRkXFxcsWrQImzdvxp9//onCwkIkJibi+eefx4oVK9r1muqi79xptWzZMly6dAnp6emYO3duJ1uMkJ6NhtgR0o3WrVuHYcOG4eeff8YzzzyD5uZm9OnTB5GRkThw4IBagoXnn38e5eXleO2118Dj8TBt2jS89NJLeO655wC0zGvavn07vv76a6xcuRJisRj9+vXD9OnT8cILLwBoufM9ZcoUbN++HX/88QcuXLiAefPmQalUYvv27fj+++9hYWGByMhIfPzxxwYN09DE29sbu3btwn//+188+uijkMlkGDBgAF577TUsW7bMoH0tW7YMIpEI//vf//DBBx+Az+fD398fX3/9teqCdfbs2eByufjxxx+xdetWmJmZITQ0FP/73/9UE6pnz56NgoIC7NmzB3v37sWQIUOwceNGrFy50uAenrsJBALs2LEDX3zxBV555RXU19fDxcUFs2bNUk1WN+T1Xrx4EatXr8ayZcvw5ptv4pVXXsGuXbuwd+9ehIaG4ssvv0RtbS3WrVuHpUuX4tSpU+2et2rVKrX9Ojk5YdeuXfjss8/wr3/9CxKJBL6+vvj000/V5r50xjPPPIOUlBQsXrwYMpkM48aNwwcffACgZUjYF198gY0bN2Lu3Lnw9vbGiy++iPDwcMTHx+P555/Ht99+ix07duCzzz7D448/jubmZri6umLcuHGqSfJs2/rrr7/Gu+++iyeffBKWlpaYPn06nn/+ebz++us6X8N7770HJycnfPHFF6isrISjoyMeeOABvPLKK0ZpI22mTZuG8ePH4/PPP8fEiRPRp08fVue1n58ftm/fji+++ALz5s2DjY0NoqKi8Nprr6mGbG3atAn//e9/8cEHH6Cqqgr29vaYOnUqXnrpJdbzy4CWxANbtmzB5s2bsW/fPjg5Oan209bUqVPB5XLVhglrM2vWLCQn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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# now the thing is we have to break them into 4 quantiles\n",
        "# so we are splitting the rfm values into 4 quantiles\n",
        "quantiles = rfm_df.quantile(q = [0.25,0.5,0.75])\n",
        "quantiles = quantiles.to_dict()\n",
        "quantiles"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9yUWiu5B6Ghd",
        "outputId": "d1dce7d8-ccbb-4bff-b75c-5cfc6a6f18be"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Recency': {0.25: 17.0, 0.5: 50.0, 0.75: 142.0},\n",
              " 'Frequency': {0.25: 17.0, 0.5: 40.0, 0.75: 98.0},\n",
              " 'Monetary': {0.25: 298.18500000000006,\n",
              "  0.5: 644.9749999999999,\n",
              "  0.75: 1571.285},\n",
              " 'Recency_log': {0.25: 2.833213344056216,\n",
              "  0.5: 3.912023005428146,\n",
              "  0.75: 4.955827057601261},\n",
              " 'Frequency_log': {0.25: 2.833213344056216,\n",
              "  0.5: 3.6888794541139363,\n",
              "  0.75: 4.584967478670572},\n",
              " 'Monetary_log': {0.25: 5.697714088709554,\n",
              "  0.5: 6.469211008718629,\n",
              "  0.75: 7.359648897891878}}"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# function to create RFM segments\n",
        "def RScore(x,p,d):\n",
        "  if x <d[p][0.25]:\n",
        "    return 1\n",
        "  elif x <= d[p][0.5] :\n",
        "    return 2\n",
        "  elif x <= d[p][0.75]:\n",
        "    return 3\n",
        "  else :\n",
        "    return 4\n",
        "\n",
        "def FnMScore(x,p,d)    :    # this function is for Frequancy\n",
        "  if x <d[p][0.25]:\n",
        "    return 4\n",
        "  elif x <= d[p][0.5] :\n",
        "    return 3\n",
        "  elif x <= d[p][0.75]:\n",
        "    return 2\n",
        "  else :\n",
        "    return 1"
      ],
      "metadata": {
        "id": "EU_tdCCm6wOD"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lets calculate the RFM segments values for each record\n",
        "rfm_df['R'] = rfm_df['Recency'].apply(RScore,args = ('Recency',quantiles,))\n",
        "rfm_df['F'] = rfm_df['Frequency'].apply(FnMScore,args = ('Frequency',quantiles,))\n",
        "rfm_df['M'] = rfm_df['Monetary'].apply(FnMScore,args = ('Monetary',quantiles,))\n",
        "rfm_df.reset_index().head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hAOIf3TS7gKg",
        "outputId": "133b0d1b-864d-42ed-d51e-9d8bfc092675"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  CustomerID  Recency  Frequency  Monetary  Recency_log  Frequency_log  \\\n",
              "0    12346.0      325          1  77183.60     5.783825       0.000000   \n",
              "1    12747.0        2        103   4196.01     0.693147       4.634729   \n",
              "2    12748.0        1       4412  33053.19     0.000000       8.392083   \n",
              "3    12749.0        3        199   4090.88     1.098612       5.293305   \n",
              "4    12820.0        3         59    942.34     1.098612       4.077537   \n",
              "\n",
              "   Monetary_log  R  F  M  \n",
              "0     11.253942  4  4  1  \n",
              "1      8.341889  1  1  1  \n",
              "2     10.405873  1  1  1  \n",
              "3      8.316515  1  1  1  \n",
              "4      6.848366  1  2  2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0d9f76bd-1819-4297-b63a-ff13d74f7b20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Recency_log</th>\n",
              "      <th>Frequency_log</th>\n",
              "      <th>Monetary_log</th>\n",
              "      <th>R</th>\n",
              "      <th>F</th>\n",
              "      <th>M</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12346.0</td>\n",
              "      <td>325</td>\n",
              "      <td>1</td>\n",
              "      <td>77183.60</td>\n",
              "      <td>5.783825</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.253942</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12747.0</td>\n",
              "      <td>2</td>\n",
              "      <td>103</td>\n",
              "      <td>4196.01</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>4.634729</td>\n",
              "      <td>8.341889</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12748.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4412</td>\n",
              "      <td>33053.19</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.392083</td>\n",
              "      <td>10.405873</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12749.0</td>\n",
              "      <td>3</td>\n",
              "      <td>199</td>\n",
              "      <td>4090.88</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>5.293305</td>\n",
              "      <td>8.316515</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12820.0</td>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>942.34</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>4.077537</td>\n",
              "      <td>6.848366</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d9f76bd-1819-4297-b63a-ff13d74f7b20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0d9f76bd-1819-4297-b63a-ff13d74f7b20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0d9f76bd-1819-4297-b63a-ff13d74f7b20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-022d6748-68fa-49d0-a217-184daba332da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-022d6748-68fa-49d0-a217-184daba332da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-022d6748-68fa-49d0-a217-184daba332da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"rfm_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12747.0\",\n          \"12820.0\",\n          \"12748.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 1,\n        \"max\": 325,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1933,\n        \"min\": 1,\n        \"max\": 4412,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          103,\n          59,\n          4412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32521.62855308034,\n        \"min\": 942.34,\n        \"max\": 77183.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4196.009999999999,\n          942.34,\n          33053.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.307522814823837,\n        \"min\": 0.0,\n        \"max\": 5.783825182329737,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6931471805599453,\n          1.0986122886681098,\n          5.783825182329737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.009243143284747,\n        \"min\": 0.0,\n        \"max\": 8.392083380373393,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.634728988229636,\n          4.07753744390572,\n          8.392083380373393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7734834776597475,\n        \"min\": 6.848366143637881,\n        \"max\": 11.253942278212147,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.341889352735464,\n          6.848366143637881,\n          10.405873361045636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we can also add the RFm score and RFM Group column in this dataframe\n",
        "# lets calculate the RFM_Group\n",
        "rfm_df['RFM_Group'] = rfm_df['R'].map(str) + rfm_df['F'].map(str) + rfm_df['M'].map(str)\n",
        "\n",
        "# lets calculate the RFM_Score for Rfm Group column\n",
        "rfm_df['RFM_Score'] = rfm_df[['R','F','M']].sum(axis = 1)\n",
        "rfm_df.reset_index().head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ctsVokp78Td9",
        "outputId": "231d4ced-1c24-4621-a24a-8e1e37ca9f57"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  CustomerID  Recency  Frequency  Monetary  Recency_log  Frequency_log  \\\n",
              "0    12346.0      325          1  77183.60     5.783825       0.000000   \n",
              "1    12747.0        2        103   4196.01     0.693147       4.634729   \n",
              "2    12748.0        1       4412  33053.19     0.000000       8.392083   \n",
              "3    12749.0        3        199   4090.88     1.098612       5.293305   \n",
              "4    12820.0        3         59    942.34     1.098612       4.077537   \n",
              "\n",
              "   Monetary_log  R  F  M RFM_Group  RFM_Score  \n",
              "0     11.253942  4  4  1       441          9  \n",
              "1      8.341889  1  1  1       111          3  \n",
              "2     10.405873  1  1  1       111          3  \n",
              "3      8.316515  1  1  1       111          3  \n",
              "4      6.848366  1  2  2       122          5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b7467e6-89f9-48f7-b766-f7b69ae75cf6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Recency_log</th>\n",
              "      <th>Frequency_log</th>\n",
              "      <th>Monetary_log</th>\n",
              "      <th>R</th>\n",
              "      <th>F</th>\n",
              "      <th>M</th>\n",
              "      <th>RFM_Group</th>\n",
              "      <th>RFM_Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12346.0</td>\n",
              "      <td>325</td>\n",
              "      <td>1</td>\n",
              "      <td>77183.60</td>\n",
              "      <td>5.783825</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.253942</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>441</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12747.0</td>\n",
              "      <td>2</td>\n",
              "      <td>103</td>\n",
              "      <td>4196.01</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>4.634729</td>\n",
              "      <td>8.341889</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12748.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4412</td>\n",
              "      <td>33053.19</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.392083</td>\n",
              "      <td>10.405873</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12749.0</td>\n",
              "      <td>3</td>\n",
              "      <td>199</td>\n",
              "      <td>4090.88</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>5.293305</td>\n",
              "      <td>8.316515</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12820.0</td>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>942.34</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>4.077537</td>\n",
              "      <td>6.848366</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b7467e6-89f9-48f7-b766-f7b69ae75cf6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4b7467e6-89f9-48f7-b766-f7b69ae75cf6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4b7467e6-89f9-48f7-b766-f7b69ae75cf6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-12d111cb-211e-47db-84a5-b91e8ed61b1f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12d111cb-211e-47db-84a5-b91e8ed61b1f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-12d111cb-211e-47db-84a5-b91e8ed61b1f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"rfm_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12747.0\",\n          \"12820.0\",\n          \"12748.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 1,\n        \"max\": 325,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1933,\n        \"min\": 1,\n        \"max\": 4412,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          103,\n          59,\n          4412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32521.62855308034,\n        \"min\": 942.34,\n        \"max\": 77183.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4196.009999999999,\n          942.34,\n          33053.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.307522814823837,\n        \"min\": 0.0,\n        \"max\": 5.783825182329737,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6931471805599453,\n          1.0986122886681098,\n          5.783825182329737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.009243143284747,\n        \"min\": 0.0,\n        \"max\": 8.392083380373393,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.634728988229636,\n          4.07753744390572,\n          8.392083380373393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7734834776597475,\n        \"min\": 6.848366143637881,\n        \"max\": 11.253942278212147,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.341889352735464,\n          6.848366143637881,\n          10.405873361045636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Group\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"441\",\n          \"111\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# find the clusters which the data is belogs to\n",
        "# first we need to import the kmeans\n",
        "rfm_df['Clusters']  = kmeans.labels_\n",
        "rfm_df.head()\n",
        "\n",
        "# we can see if the RFM score is not able to explain the data better then clusters can"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "xlGyex4R86zb",
        "outputId": "000f1d94-b154-44b6-9b18-d483d056e519"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Recency  Frequency  Monetary  Recency_log  Frequency_log  \\\n",
              "CustomerID                                                             \n",
              "12346.0         325          1  77183.60     5.783825       0.000000   \n",
              "12747.0           2        103   4196.01     0.693147       4.634729   \n",
              "12748.0           1       4412  33053.19     0.000000       8.392083   \n",
              "12749.0           3        199   4090.88     1.098612       5.293305   \n",
              "12820.0           3         59    942.34     1.098612       4.077537   \n",
              "\n",
              "            Monetary_log  R  F  M RFM_Group  RFM_Score  Clusters  \n",
              "CustomerID                                                        \n",
              "12346.0        11.253942  4  4  1       441          9         2  \n",
              "12747.0         8.341889  1  1  1       111          3         0  \n",
              "12748.0        10.405873  1  1  1       111          3         0  \n",
              "12749.0         8.316515  1  1  1       111          3         0  \n",
              "12820.0         6.848366  1  2  2       122          5         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d5109ff-cd9a-407c-96f0-362e6983f1bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Recency_log</th>\n",
              "      <th>Frequency_log</th>\n",
              "      <th>Monetary_log</th>\n",
              "      <th>R</th>\n",
              "      <th>F</th>\n",
              "      <th>M</th>\n",
              "      <th>RFM_Group</th>\n",
              "      <th>RFM_Score</th>\n",
              "      <th>Clusters</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerID</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12346.0</th>\n",
              "      <td>325</td>\n",
              "      <td>1</td>\n",
              "      <td>77183.60</td>\n",
              "      <td>5.783825</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.253942</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>441</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12747.0</th>\n",
              "      <td>2</td>\n",
              "      <td>103</td>\n",
              "      <td>4196.01</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>4.634729</td>\n",
              "      <td>8.341889</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12748.0</th>\n",
              "      <td>1</td>\n",
              "      <td>4412</td>\n",
              "      <td>33053.19</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.392083</td>\n",
              "      <td>10.405873</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12749.0</th>\n",
              "      <td>3</td>\n",
              "      <td>199</td>\n",
              "      <td>4090.88</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>5.293305</td>\n",
              "      <td>8.316515</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12820.0</th>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>942.34</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>4.077537</td>\n",
              "      <td>6.848366</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d5109ff-cd9a-407c-96f0-362e6983f1bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d5109ff-cd9a-407c-96f0-362e6983f1bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d5109ff-cd9a-407c-96f0-362e6983f1bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-183ffa94-35d2-441e-ac23-4d9d82907fbf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-183ffa94-35d2-441e-ac23-4d9d82907fbf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-183ffa94-35d2-441e-ac23-4d9d82907fbf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"# we can see if the RFM score is not able to explain the data better then clusters can\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12747.0\",\n          \"12820.0\",\n          \"12748.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 144,\n        \"min\": 1,\n        \"max\": 325,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3,\n          325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1933,\n        \"min\": 1,\n        \"max\": 4412,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          103,\n          59,\n          4412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32521.62855308034,\n        \"min\": 942.34,\n        \"max\": 77183.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4196.009999999999,\n          942.34,\n          33053.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.307522814823837,\n        \"min\": 0.0,\n        \"max\": 5.783825182329737,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6931471805599453,\n          1.0986122886681098,\n          5.783825182329737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.009243143284747,\n        \"min\": 0.0,\n        \"max\": 8.392083380373393,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.634728988229636,\n          4.07753744390572,\n          8.392083380373393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7734834776597475,\n        \"min\": 6.848366143637881,\n        \"max\": 11.253942278212147,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.341889352735464,\n          6.848366143637881,\n          10.405873361045636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Group\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"441\",\n          \"111\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Clusters\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " # for understanding the clusters we can get the average of the clusters\n",
        " # group by cluster lables and calculate the mean\n",
        "\n",
        "# lets check the data types of the rfm_df\n",
        "rfm_df.dtypes\n",
        "# so we have to chaneg the dtype of the rem_group columns , object to int\n",
        "rfm_df['RFM_Group'] = rfm_df['RFM_Group'].astype(int)\n",
        "\n",
        " # first we need to get the data type of all the columns\n",
        "# the clusters columns is containing the values in the int form so we can do the average of this columns\n",
        "clusters_average = rfm_df.groupby('Clusters').mean()\n",
        "clusters_average"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "1sXqZvxi9PL3",
        "outputId": "37e88d04-52d3-4beb-c46a-e1b3a815e64f"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Recency   Frequency     Monetary  Recency_log  Frequency_log  \\\n",
              "Clusters                                                                    \n",
              "0          11.306698  254.151586  5806.548555     1.864721       5.133885   \n",
              "1         166.381422   14.859958   285.338762     4.771181       2.371500   \n",
              "2          68.936286   67.842233  1176.083400     3.804684       3.993813   \n",
              "\n",
              "          Monetary_log         R         F         M   RFM_Group  RFM_Score  \n",
              "Clusters                                                                     \n",
              "0             8.025179  1.244418  1.294947  1.246769  138.638073   3.786134  \n",
              "1             5.404982  3.315271  3.610134  3.568614  371.197044  10.494018  \n",
              "2             6.746253  2.464806  2.171723  2.225728  270.423544   6.862257  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-513ed6ce-4a2e-4ccb-a1d1-962c3a0fa3df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Recency</th>\n",
              "      <th>Frequency</th>\n",
              "      <th>Monetary</th>\n",
              "      <th>Recency_log</th>\n",
              "      <th>Frequency_log</th>\n",
              "      <th>Monetary_log</th>\n",
              "      <th>R</th>\n",
              "      <th>F</th>\n",
              "      <th>M</th>\n",
              "      <th>RFM_Group</th>\n",
              "      <th>RFM_Score</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Clusters</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>11.306698</td>\n",
              "      <td>254.151586</td>\n",
              "      <td>5806.548555</td>\n",
              "      <td>1.864721</td>\n",
              "      <td>5.133885</td>\n",
              "      <td>8.025179</td>\n",
              "      <td>1.244418</td>\n",
              "      <td>1.294947</td>\n",
              "      <td>1.246769</td>\n",
              "      <td>138.638073</td>\n",
              "      <td>3.786134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>166.381422</td>\n",
              "      <td>14.859958</td>\n",
              "      <td>285.338762</td>\n",
              "      <td>4.771181</td>\n",
              "      <td>2.371500</td>\n",
              "      <td>5.404982</td>\n",
              "      <td>3.315271</td>\n",
              "      <td>3.610134</td>\n",
              "      <td>3.568614</td>\n",
              "      <td>371.197044</td>\n",
              "      <td>10.494018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>68.936286</td>\n",
              "      <td>67.842233</td>\n",
              "      <td>1176.083400</td>\n",
              "      <td>3.804684</td>\n",
              "      <td>3.993813</td>\n",
              "      <td>6.746253</td>\n",
              "      <td>2.464806</td>\n",
              "      <td>2.171723</td>\n",
              "      <td>2.225728</td>\n",
              "      <td>270.423544</td>\n",
              "      <td>6.862257</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-513ed6ce-4a2e-4ccb-a1d1-962c3a0fa3df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-513ed6ce-4a2e-4ccb-a1d1-962c3a0fa3df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-513ed6ce-4a2e-4ccb-a1d1-962c3a0fa3df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eee40b8f-fb21-425a-9e52-fa8fc39451fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eee40b8f-fb21-425a-9e52-fa8fc39451fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eee40b8f-fb21-425a-9e52-fa8fc39451fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0a79515f-d2e7-4fee-b7f8-918b7c69d331\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('clusters_average')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0a79515f-d2e7-4fee-b7f8-918b7c69d331 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('clusters_average');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "clusters_average",
              "summary": "{\n  \"name\": \"clusters_average\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Clusters\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 78.38462189531747,\n        \"min\": 11.306698002350176,\n        \"max\": 166.38142153413088,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          11.306698002350176,\n          166.38142153413088,\n          68.93628640776699\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125.68398210899423,\n        \"min\": 14.859957776213934,\n        \"max\": 254.15158636897766,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          254.15158636897766,\n          14.859957776213934,\n          67.84223300970874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2964.185979656644,\n        \"min\": 285.3387621393385,\n        \"max\": 5806.5485546415985,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5806.5485546415985,\n          285.3387621393385,\n          1176.0833998786406\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4801509358594767,\n        \"min\": 1.8647213651508174,\n        \"max\": 4.771181194772458,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.8647213651508174,\n          4.771181194772458,\n          3.804684084356268\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Frequency_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3881905375546446,\n        \"min\": 2.371499593022607,\n        \"max\": 5.133884954843175,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5.133884954843175,\n          2.371499593022607,\n          3.993813074089878\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Monetary_log\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3102223945763394,\n        \"min\": 5.404981727402198,\n        \"max\": 8.025179286750125,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          8.025179286750125,\n          5.404981727402198,\n          6.746253127088668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.040918428572975,\n        \"min\": 1.2444183313748531,\n        \"max\": 3.315270935960591,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.2444183313748531,\n          3.315270935960591,\n          2.4648058252427183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1688919187379248,\n        \"min\": 1.2949471210340775,\n        \"max\": 3.610133708655876,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.2949471210340775,\n          3.610133708655876,\n          2.1717233009708736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1656663563520153,\n        \"min\": 1.2467685076380728,\n        \"max\": 3.5686136523574947,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.2467685076380728,\n          3.5686136523574947,\n          2.2257281553398056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Group\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.62359964924845,\n        \"min\": 138.63807285546417,\n        \"max\": 371.1970443349754,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          138.63807285546417,\n          371.1970443349754,\n          270.4235436893204\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RFM_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.357775430247288,\n        \"min\": 3.7861339600470036,\n        \"max\": 10.494018296973962,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3.7861339600470036,\n          10.494018296973962,\n          6.862257281553398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "from this table we can enterprate that the recency of the customers for cluster 1 is 165 that mean the last 165 days the customer is arrived in the superstore and purchase the items but the monetery is not that much high so it will be bad for our dataset . we can not take this in our priority list ,they are bad customers , and if we go with the cluster 2 in that we can see the recency is 10 and the frequency of these customers is arounf 258 that will be good for our data and we can do some kind of task for them and if we go with the cluster 3 ther is recency is around 67 and frequency is something 69 but the items they are monetering is 1200 so we can see the cluster 2 is much better to do some kind of task nd make prediction .\n",
        "\n",
        "for the RFM score we can simply enterprate that lower is better . cluster 1is for very best customers . and we do give them some kind of discount and offers for make our sell much better and have a good customer setisfaction , also we can sonsider the cluster 2 for this ."
      ],
      "metadata": {
        "id": "hmnKN6CNDYkw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "** This was our case study . in which we have done lots of things like"
      ],
      "metadata": {
        "id": "gAl563hkdY3Z"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7kuvVUK5-I4L"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "30HIHNrLCPzN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
